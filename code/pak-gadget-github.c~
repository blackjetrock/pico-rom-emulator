#include <stdio.h>
#include "pico/stdlib.h"
//#include "hardware/i2c.h"
#include "hardware/pio.h"
#include "hardware/clocks.h"
#include "pico/multicore.h"

#include "f_util.h"
#include "ff.h"
#include "hw_config.h"
#include "my_debug.h"
#include "rtc.h"

// redefine pins to match our hardware
#define PICO_SD_CLK_PIN  5
#define PICO_SD_CMD_PIN  18
#define PICO_SD_DAT0_PIN 19
#define ENABLE_4_PIN 0
#include "sd_card.h"

#define SUPPORT_ID_BYTE  1
#define PAK_ID_BYTE      0x01
#define READ_ONLY        0
#define INIT_PAK_MEMORY  1
#define FF_FIRST_BYTES   0

#define DIRECT_GPIO  1

// Do we use a polling loop of interrupts?
#define USE_INTERRUPTS  0
#define USE_POLLING     1

#define MULTICORE_POLL   1

// The address into pak memory
#define PAK_ADDRESS (ss_address | ss_page)

const uint SDA_PIN    = 28;
const uint SCL_PIN    = 17;

#ifndef I2C_FUNCTIONS_H_
#define I2C_FUNCTIONS_H_

typedef unsigned char BYTE;

const int SLOT_SPGM_PIN = 2;
const int SLOT_SS_PIN   = 3;
const int SLOT_SCLK_PIN = 4;
const int SW3_PIN       = 5;
const int SLOT_SOE_PIN  = 6;
const int SLOT_SMR_PIN  = 7;

const int SLOT_SD0_PIN  = 8;
const int SLOT_SD1_PIN  = 9;
const int SLOT_SD2_PIN  = 10;
const int SLOT_SD3_PIN  = 11;
const int SLOT_SD4_PIN  = 12;
const int SLOT_SD5_PIN  = 13;
const int SLOT_SD6_PIN  = 14;
const int SLOT_SD7_PIN  = 15;

const int LS_DIR_PIN    = 27;

volatile int ss_count = 0;
volatile int soe_state = 1;
volatile int ss_address = 0;
volatile int ss_page = 0;


// Memory that emulates a pak
typedef unsigned char BYTE;

#define TRACE_LENGTH 8192
BYTE trace[TRACE_LENGTH];

int trace_i = 0;
//#define TRACE(XX) if(trace_i != (TRACE_LENGTH-1)) {trace[trace_i++] = XX; trace_i %= TRACE_LENGTH;}
#define TRACE(XX)

//#define WRITE_TRAP if( (PAK_ADDRESS + data) == 0)  while(1);

//#define WRITE_TRAP if( (ss_address + data + ss_page) == 0){  gpio_put(22,1);     gpio_put(22,0);}
#define WRITE_TRAP

#define PAK_MEMORY_SIZE  32768


#if !INIT_PAK_MEMORY
volatile BYTE pak_memory[PAK_MEMORY_SIZE];
#else

BYTE pak_memory[PAK_MEMORY_SIZE] =
  {
   
   0x78,0x04,0x56,0x00,0x03,0x02,0x35,0x46,0x06,0x4c,
   0x09,0x81,0x4d,0x41,0x49,0x4e,0x20,0x20,0x20,0x20,0x90,0x09,0x83,0x46,0x49,0x53,
   0x48,0x20,0x20,0x20,0x20,0x00,0x02,0x80,0x01,0x26,0x01,0x22,0x00,0x29,0x00,0xfc,
   0x00,0x00,0x13,0x02,0x59,0x25,0x00,0xff,0xe9,0x03,0x44,0x52,0x24,0x02,0xff,0xe6,
   0x02,0x46,0x24,0x02,0xff,0xdc,0x00,0x00,0x00,0x06,0xff,0xe5,0x02,0xff,0xdb,0x08,
   0x00,0x00,0x0f,0xff,0xdc,0x24,0x04,0x46,0x49,0x53,0x48,0x20,0x02,0x20,0x01,0x7d,
   0x06,0x45,0x58,0x49,0x53,0x54,0x24,0x81,0x02,0xff,0xdc,0x24,0x00,0x4a,0x7e,0x00,
   0x32,0x0d,0xff,0xd9,0x24,0x10,0x43,0x52,0x45,0x41,0x54,0x45,0x2d,0x46,0x49,0x4c,
   0x45,0x2c,0x51,0x55,0x49,0x54,0x98,0x7f,0x00,0xff,0xd9,0x022,0x00,0x01,0x2c,0x7e,
   0x00,0x10,0x20,0x00,0x7d,0x06,0x46,0x49,0x53,0x48,0x43,0x52,0x84,0x51,0x00,0x03,
   0x7b,0x20,0x00,0x7d,0x06,0x46,0x49,0x53,0x48,0x4f,0x50,0x84,0x20,0x00,0x7d,0x06,
   0x4d,0x41,0x44,0x55,0x44,0x47,0x84,0x0d,0xff,0xd7,0x24,0x20,0x41,0x44,0x44,0x2d,
   0x4e,0x45,0x57,0x2d,0x46,0x49,0x53,0x48,0x2c,0x53,0x45,0x41,0x52,0x43,0x48,0x2c,
   0x52,0x45,0x50,0x4f,0x52,0x54,0x2c,0x55,0x54,0x49,0x4c,0x53,0x98,0x7f,0x00,0xff,
   0xd7,0x22,0x00,0x01,0x2c,0x7e,0x00,0x14,0x20,0x00,0x7d,0x07,0x46,0x49,0x53,0x48,
   0x41,0x44,0x44,0x84,0x51,0xff,0xc2,0x51,0x00,0x55,0x00,0xff,0xd7,0x22,0x00,0x02,
   0x2c,0x7e,0x00,0x14,0x20,0x00,0x7d,0x07,0x46,0x49,0x53,0x48,0x53,0x45,0x45,0x84,
   0x51,0xff,0xa6,0x51,0x00,0x39,0x00,0xff,0xd7,0x22,0x00,0x03,0x2c,0x7e,0x00,0x14,
   0x20,0x00,0x7d,0x07,0x46,0x49,0x53,0x48,0x52,0x45,0x50,0x84,0x51,0xff,0x8a,0x51,
   0x00,0x1d,0x00,0xff,0xd7,0x22,0x00,0x04,0x2c,0x7e,0x00,0x12,0x20,0x00,0x7d,0x05,
   0x55,0x54,0x49,0x4c,0x53,0x84,0x51,0xff,0x70,0x51,0x00,0x03,0x7b,0x7b,0x00,0x00,
   0x09,0x83,0x46,0x49,0x53,0x48,0x41,0x44,0x44,0x20,0x00,0x02,0x80,0x06,0x11,0x06,
   0x0d,0x00,0x3a,0x05,0xee,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0xff,0xf4,0x06,0xff,
   0xe6,0x04,0xff,0xe2,0x02,0xff,0xde,0x02,0xff,0xd8,0x04,0xff,0xc6,0x10,0x00,0x00,
   0x4e,0x24,0x0f,0x45,0x58,0x45,0x20,0x74,0x6f,0x20,0x63,0x6f,0x6e,0x74,0x69,0x6e,
   0x75,0x65,0x71,0x73,0x24,0x0d,0x43,0x4c,0x45,0x41,0x52,0x20,0x74,0x6f,0x20,0x71,
   0x75,0x69,0x74,0x71,0x73,0x0d,0xff,0xfc,0x91,0x7f,0x00,0xff,0xfc,0x22,0x00,0x0d,
   0x2b,0x7e,0x00,0x03,0x7b,0x4e,0x62,0x24,0x04,0x44,0x41,0x59,0x24,0x1f,0x00,0xb9,
   0x22,0x00,0x10,0xc0,0x81,0x0f,0xff,0xc7,0x24,0x04,0x44,0x41,0x59,0x24,0x1c,0x00,
   0x81,0x24,0x04,0x44,0x41,0x59,0x24,0x1f,0x00,0x6b,0x24,0x04,0x44,0x41,0x59,0x24,
   0x1c,0x00,0x02,0xff,0xc7,0x49,0x7e,0x00,0x85,0x53,0xff,0xff,0x24,0x04,0x44,0x41,
   0x59,0x24,0x1f,0x00,0x24,0x04,0x44,0x41,0x59,0x24,0x1c,0x00,0x22,0x00,0x10,0xc0,
   0x81,0x22,0x00,0x03,0x6a,0x0f,0xff,0xe3,0x8c,0x86,0x22,0x00,0x02,0xbc,0x81,0x0f,
   0xff,0xdf,0x9a,0x86,0x22,0x00,0x02,0xbc,0x81,0x0f,0xff,0xd9,0xa1,0x86,0x22,0x00,
   0x04,0xbc,0x81,0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x0f,0xff,0xe3,0x6b,0x22,0x00,
   0x04,0x22,0x00,0x02,0x4c,0x0f,0xff,0xdf,0x6b,0x22,0x00,0x08,0x22,0x00,0x02,0x4c,
   0x0f,0xff,0xd9,0x6b,0x24,0x01,0x44,0x1e,0x00,0x02,0xff,0xe3,0xb5,0x02,0xff,0xdf,
   0xb5,0x22,0x00,0x64,0x86,0x3e,0x3c,0x02,0xff,0xd9,0xb5,0x22,0x27,0x10,0x86,0x3e,
   0x3c,0x80,0x22,0x00,0x01,0x6a,0x53,0x00,0x00,0x51,0x00,0x24,0x24,0x01,0x44,0x1e,
   0x00,0xa1,0x86,0x80,0x24,0x01,0x44,0x1e,0x00,0x24,0x01,0x44,0x1b,0x00,0x22,0x27,
   0x10,0x86,0x3e,0x9a,0x22,0x00,0x64,0x2f,0x86,0x3c,0x8c,0x86,0x3c,0x80,0x4e,0x24,
   0x0c,0x45,0x4e,0x54,0x45,0x52,0x20,0x57,0x41,0x54,0x45,0x52,0x53,0x71,0x73,0x24,
   0x06,0x57,0x41,0x54,0x45,0x52,0x24,0x1f,0x00,0x6b,0x24,0x06,0x57,0x41,0x54,0x45,
   0x52,0x24,0x1f,0x00,0x24,0x06,0x57,0x41,0x54,0x45,0x52,0x24,0x1c,0x00,0xc7,0x81,
   0x4e,0x0d,0xff,0xfc,0x24,0x22,0x53,0x41,0x4c,0x4d,0x4f,0x4e,0x2c,0x53,0x45,0x41,
   0x2d,0x54,0x52,0x4f,0x55,0x54,0x2c,0x42,0x52,0x4f,0x57,0x4e,0x2d,0x54,0x52,0x4f,
   0x55,0x54,0x2c,0x4f,0x54,0x48,0x45,0x52,0x98,0x7f,0x00,0xff,0xfc,0x22,0x00,0x01,
   0x2c,0x7e,0x00,0x17,0x24,0x05,0x46,0x49,0x53,0x48,0x24,0x1f,0x00,0x24,0x06,0x53,
   0x41,0x4c,0x4d,0x4f,0x4e,0x81,0x51,0x00,0x85,0x00,0xff,0xfc,0x22,0x00,0x02,0x2c,
   0x7e,0x00,0x1a,0x24,0x05,0x46,0x49,0x53,0x48,0x24,0x1f,0x00,0x24,0x09,0x53,0x45,
   0x41,0x2d,0x54,0x52,0x4f,0x55,0x54,0x81,0x51,0x00,0x63,0x00,0xff,0xfc,0x22,0x00,
   0x03,0x2c,0x7e,0x00,0x1c,0x24,0x05,0x46,0x49,0x53,0x48,0x24,0x1f,0x00,0x24,0x0b,
   0x42,0x52,0x4f,0x57,0x4e,0x2d,0x54,0x52,0x4f,0x55,0x54,0x81,0x51,0x00,0x3f,0x00,
   0xff,0xfc,0x22,0x00,0x04,0x2c,0x7e,0x00,0x32,0x4e,0x24,0x0a,0x45,0x4e,0x54,0x45,
   0x52,0x20,0x46,0x49,0x53,0x48,0x71,0x73,0x24,0x05,0x46,0x49,0x53,0x48,0x24,0x1f,
   0x00,0x6b,0x24,0x05,0x46,0x49,0x53,0x48,0x24,0x1f,0x00,0x24,0x05,0x46,0x49,0x53,
   0x48,0x24,0x1c,0x00,0xc7,0x81,0x51,0x00,0x05,0x51,0x03,0xc2,0x4e,0x24,0x1c,0x45,
   0x4e,0x54,0x45,0x52,0x20,0x4e,0x55,0x4d,0x42,0x45,0x52,0x20,0x4f,0x46,0x20,0x46,
   0x49,0x53,0x48,0x20,0x43,0x41,0x55,0x47,0x48,0x54,0x20,0x71,0x0f,0xff,0xe7,0x24,
   0x01,0x31,0x81,0x22,0x00,0x03,0x6a,0x0f,0xff,0xe7,0x6b,0x02,0xff,0xe7,0x24,0x00,
   0x4a,0x7e,0x00,0x09,0x0f,0xff,0xe7,0x24,0x01,0x30,0x81,0x53,0xff,0xc0,0x24,0x03,
   0x4e,0x4f,0x25,0x1d,0x00,0x02,0xff,0xe7,0xb5,0x94,0x7f,0x53,0x00,0x00,0x4e,0x22,
   0x00,0x01,0x6a,0x0d,0xff,0xfc,0x24,0x08,0x46,0x4c,0x59,0x2c,0x42,0x41,0x49,0x54,
   0x98,0x7f,0x00,0xff,0xfc,0x22,0x00,0x01,0x2c,0x7e,0x00,0x60,0x4e,0x24,0x09,0x45,
   0x4e,0x54,0x45,0x52,0x20,0x46,0x4c,0x59,0x71,0x73,0x24,0x04,0x46,0x4c,0x59,0x24,
   0x1c,0x00,0x24,0x00,0x4a,0x7e,0x00,0x13,0x24,0x04,0x46,0x4c,0x59,0x24,0x1f,0x00,
   0x24,0x06,0x4e,0x4f,0x20,0x46,0x4c,0x59,0x81,0x24,0x04,0x46,0x4c,0x59,0x24,0x1f,
   0x00,0x6b,0x24,0x04,0x46,0x4c,0x59,0x24,0x1f,0x00,0x24,0x04,0x46,0x4c,0x59,0x24,
   0x1c,0x00,0xc7,0x81,0x24,0x05,0x42,0x41,0x49,0x54,0x24,0x1f,0x00,0x24,0x07,0x4e,
   0x4f,0x20,0x42,0x41,0x49,0x54,0x81,0x51,0x00,0x72,0x00,0xff,0xfc,0x22,0x00,0x02,
   0x2c,0x7e,0x00,0x65,0x4e,0x24,0x0a,0x45,0x4e,0x54,0x45,0x52,0x20,0x42,0x41,0x49,
   0x54,0x71,0x73,0x24,0x05,0x42,0x41,0x49,0x54,0x24,0x1c,0x00,0x24,0x00,0x4a,0x7e,
   0x00,0x15,0x24,0x05,0x42,0x41,0x49,0x54,0x24,0x1f,0x00,0x24,0x07,0x4e,0x4f,0x20,
   0x42,0x41,0x49,0x54,0x81,0x24,0x05,0x42,0x41,0x49,0x54,0x24,0x1f,0x00,0x6b,0x24,
   0x05,0x42,0x41,0x49,0x54,0x24,0x1f,0x00,0x24,0x05,0x42,0x41,0x49,0x54,0x24,0x1c,
   0x00,0xc7,0x81,0x24,0x04,0x46,0x4c,0x59,0x24,0x1f,0x00,0x24,0x06,0x4e,0x4f,0x20,
   0x46,0x4c,0x59,0x81,0x51,0x00,0x05,0x51,0x02,0x84,0x4e,0x24,0x0c,0x45,0x4e,0x54,
   0x45,0x52,0x20,0x57,0x45,0x49,0x47,0x48,0x54,0x71,0x73,0x22,0x00,0x03,0x6a,0x22,
   0x00,0x01,0x22,0x00,0x02,0x4c,0x53,0xff,0xe3,0x0f,0xff,0xf5,0x6e,0x02,0xff,0xf5,
   0x24,0x00,0x4a,0x7e,0x00,0x09,0x0f,0xff,0xf5,0x24,0x01,0x30,0x81,0x24,0x02,0x57,
   0x54,0x1e,0x00,0x02,0xff,0xf5,0xb5,0x80,0x53,0x00,0x00,0x4e,0x22,0x00,0x01,0x6a,
   0x0d,0xff,0xfc,0x24,0x20,0x43,0x4c,0x4f,0x55,0x44,0x59,0x2c,0x42,0x52,0x49,0x47,
   0x48,0x54,0x2c,0x52,0x41,0x49,0x4e,0x2c,0x54,0x48,0x55,0x4e,0x44,0x45,0x52,0x2c,
   0x4f,0x54,0x48,0x45,0x52,0x98,0x7f,0x00,0xff,0xfc,0x22,0x00,0x01,0x2c,0x7e,0x00,
   0x17,0x24,0x05,0x43,0x4f,0x4e,0x44,0x24,0x1f,0x00,0x24,0x06,0x43,0x4c,0x4f,0x55,
   0x44,0x59,0x81,0x51,0x00,0x9e,0x00,0xff,0xfc,0x22,0x00,0x02,0x2c,0x7e,0x00,0x17,
   0x24,0x05,0x43,0x4f,0x4e,0x44,0x24,0x1f,0x00,0x24,0x06,0x42,0x52,0x49,0x47,0x48,
   0x54,0x81,0x51,0x00,0x7f,0x00,0xff,0xfc,0x22,0x00,0x03,0x2c,0x7e,0x00,0x15,0x24,
   0x05,0x43,0x4f,0x4e,0x44,0x24,0x1f,0x00,0x24,0x04,0x52,0x41,0x49,0x4e,0x81,0x51,
   0x00,0x62,0x00,0xff,0xfc,0x22,0x00,0x04,0x2c,0x7e,0x00,0x18,0x24,0x05,0x43,0x4f,
   0x4e,0x44,0x24,0x1f,0x00,0x24,0x07,0x54,0x48,0x55,0x4e,0x44,0x45,0x52,0x81,0x51,
   0x00,0x42,0x00,0xff,0xfc,0x22,0x00,0x05,0x2c,0x7e,0x00,0x35,0x4e,0x24,0x0d,0x45,
   0x4e,0x54,0x45,0x52,0x20,0x57,0x45,0x41,0x54,0x48,0x45,0x52,0x71,0x73,0x24,0x05,
   0x43,0x4f,0x4e,0x44,0x24,0x1f,0x00,0x6b,0x24,0x05,0x43,0x4f,0x4e,0x44,0x24,0x1f,
   0x00,0x24,0x05,0x43,0x4f,0x4e,0x44,0x24,0x1c,0x00,0xc7,0x81,0x51,0x00,0x05,0x51,
   0x01,0x5c,0x4e,0x0d,0xff,0xfc,0x24,0x1d,0x4e,0x4f,0x4e,0x45,0x2c,0x48,0x49,0x2d,
   0x54,0x49,0x44,0x45,0x2c,0x4d,0x49,0x44,0x2d,0x54,0x49,0x44,0x45,0x2c,0x4c,0x4f,
   0x2d,0x54,0x49,0x44,0x45,0x98,0x7f,0x00,0xff,0xfc,0x22,0x00,0x01,0x2c,0x7e,0x00,
   0x18,0x24,0x05,0x54,0x49,0x44,0x45,0x24,0x1f,0x00,0x24,0x07,0x4e,0x4f,0x20,0x54,
   0x49,0x44,0x45,0x81,0x51,0x00,0x69,0x00,0xff,0xfc,0x22,0x00,0x02,0x2c,0x7e,0x00,
   0x1a,0x24,0x05,0x54,0x49,0x44,0x45,0x24,0x1f,0x00,0x24,0x09,0x48,0x49,0x47,0x48,
   0x2d,0x54,0x49,0x44,0x45,0x81,0x51,0x00,0x47,0x00,0xff,0xfc,0x22,0x00,0x03,0x2c,
   0x7e,0x00,0x19,0x24,0x05,0x54,0x49,0x44,0x45,0x24,0x1f,0x00,0x24,0x08,0x4d,0x49,
   0x44,0x2d,0x54,0x49,0x44,0x45,0x81,0x51,0x00,0x26,0x00,0xff,0xfc,0x22,0x00,0x04,
   0x2c,0x7e,0x00,0x19,0x24,0x05,0x54,0x49,0x44,0x45,0x24,0x1f,0x00,0x24,0x08,0x4c,
   0x4f,0x57,0x2d,0x54,0x49,0x44,0x45,0x81,0x51,0x00,0x05,0x51,0x00,0xb0,0x4e,0x0d,
   0xff,0xfc,0x24,0x10,0x41,0x4d,0x2c,0x50,0x4d,0x2c,0x4e,0x4f,0x4f,0x4e,0x2c,0x4e,
   0x49,0x47,0x48,0x54,0x98,0x7f,0x00,0xff,0xfc,0x22,0x00,0x01,0x2c,0x7e,0x00,0x13,
   0x24,0x05,0x54,0x49,0x4d,0x45,0x24,0x1f,0x00,0x24,0x02,0x41,0x4d,0x81,0x51,0x00,
   0x5b,0x00,0xff,0xfc,0x22,0x00,0x02,0x2c,0x7e,0x00,0x13,0x24,0x05,0x54,0x49,0x4d,
   0x45,0x24,0x1f,0x00,0x24,0x02,0x50,0x4d,0x81,0x51,0x00,0x40,0x00,0xff,0xfc,0x22,
   0x00,0x03,0x2c,0x7e,0x00,0x15,0x24,0x05,0x54,0x49,0x4d,0x45,0x24,0x1f,0x00,0x24,
   0x04,0x4e,0x4f,0x4f,0x4e,0x81,0x51,0x00,0x23,0x00,0xff,0xfc,0x22,0x00,0x04,0x2c,
   0x7e,0x00,0x16,0x24,0x05,0x54,0x49,0x4d,0x45,0x24,0x1f,0x00,0x24,0x05,0x4e,0x49,
   0x47,0x48,0x54,0x81,0x51,0x00,0x05,0x51,0x00,0x24,0x4e,0x24,0x0e,0x45,0x4e,0x54,
   0x45,0x52,0x20,0x43,0x4f,0x4d,0x4d,0x45,0x4e,0x54,0x53,0x71,0x73,0x24,0x08,0x43,
   0x4f,0x4d,0x4d,0x45,0x4e,0x54,0x24,0x1f,0x00,0x6e,0x5b,0x7b,0x4e,0x0d,0xff,0xfc,
   0x24,0x0a,0x53,0x41,0x56,0x45,0x2c,0x41,0x42,0x4f,0x52,0x54,0x98,0x7f,0x00,0xff,
   0xfc,0x22,0x00,0x01,0x2c,0x7e,0x00,0x06,0x5b,0x51,0x00,0x03,0x7b,0x7b,0x00,0x00,
   0x09,0x83,0x46,0x49,0x53,0x48,0x53,0x45,0x45,0x20,0x00,0x02,0x80,0x05,0x0e,0x05,
   0x0a,0x00,0x32,0x04,0xf7,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0xff,0xea,0x10,0xff,
   0xd0,0x10,0x00,0x00,0x22,0x00,0x01,0x6a,0x4e,0x0d,0xff,0xe4,0x24,0x18,0x46,0x49,
   0x4e,0x44,0x2c,0x45,0x44,0x49,0x54,0x2c,0x4e,0x4f,0x2e,0x2d,0x4f,0x46,0x2d,0x52,
   0x45,0x43,0x4f,0x52,0x44,0x53,0x98,0x7f,0x00,0xff,0xe4,0x22,0x00,0x01,0x2c,0x7e,
   0x00,0x0c,0x0d,0xff,0xe2,0x22,0x00,0x00,0x7f,0x51,0x00,0x45,0x00,0xff,0xe4,0x22,
   0x00,0x02,0x2c,0x7e,0x00,0x0c,0x0d,0xff,0xe2,0x22,0x00,0x01,0x7f,0x51,0x00,0x31,
   0x00,0xff,0xe4,0x22,0x00,0x03,0x2c,0x7e,0x00,0x26,0x4e,0x24,0x0f,0x4e,0x4f,0x2e,
   0x20,0x4f,0x46,0x20,0x52,0x45,0x43,0x4f,0x52,0x44,0x53,0x3d,0x71,0x73,0x0d,0xff,
   0xe4,0xa2,0x7f,0xa2,0x6f,0x73,0x91,0x83,0x51,0xff,0x8b,0x51,0x00,0x03,0x7b,0x61,
   0x24,0x06,0x46,0x49,0x4e,0x44,0x3a,0x20,0x71,0x73,0x0d,0xff,0xe6,0x95,0x7f,0x0f,
   0xff,0xeb,0x6e,0x00,0xff,0xe6,0x22,0x00,0x01,0x2c,0x7e,0x00,0x03,0x7b,0x0d,0xff,
   0xfc,0x22,0x00,0x00,0x7f,0x0d,0xff,0xfc,0x02,0xff,0xeb,0x8f,0x7f,0x00,0xff,0xfc,
   0x22,0x00,0x00,0x2c,0x7e,0x00,0x1b,0x4e,0x24,0x0f,0x2a,0x2a,0x45,0x4e,0x44,0x20,
   0x4f,0x46,0x20,0x46,0x49,0x4c,0x45,0x2a,0x2a,0x71,0x73,0x91,0x83,0x51,0xff,0x36,
   0x00,0xff,0xe2,0x22,0x00,0x01,0x2c,0x7e,0x00,0x05,0x51,0x00,0x62,0x4e,0xa3,0x7e,
   0x00,0x1a,0x24,0x0f,0x2a,0x2a,0x45,0x4e,0x44,0x20,0x4f,0x46,0x20,0x46,0x49,0x4c,
   0x45,0x2a,0x2a,0x71,0x73,0x91,0x83,0x51,0xff,0x0c,0x0d,0xff,0xe8,0x22,0x00,0x01,
   0x32,0x24,0x00,0x8d,0x7f,0x00,0xff,0xe8,0x22,0x00,0x0d,0x2b,0x7e,0x00,0x1c,0x0d,
   0xff,0xe8,0x22,0x00,0x00,0x24,0x00,0x8d,0x7f,0x00,0xff,0xe8,0x22,0x00,0x01,0x2c,
   0x7e,0x00,0x05,0x51,0x00,0x05,0x51,0xff,0xde,0x00,0xff,0xe8,0x22,0x00,0x01,0x2c,
   0x7e,0x00,0x08,0x51,0xfe,0xd0,0x51,0x00,0x06,0x63,0x51,0xff,0x6a,0x4e,0x22,0x00,
   0x01,0x22,0x00,0x01,0x4c,0x24,0x07,0x45,0x44,0x3a,0x44,0x41,0x54,0x45,0x71,0x73,
   0x0f,0xff,0xd1,0x24,0x04,0x44,0x41,0x59,0x24,0x1c,0x00,0x81,0x22,0x00,0x01,0x22,
   0x00,0x02,0x4c,0x24,0x04,0x44,0x41,0x59,0x24,0x1f,0x00,0x6b,0x24,0x04,0x44,0x41,
   0x59,0x24,0x1c,0x00,0x24,0x00,0x4a,0x7e,0x00,0x05,0x51,0xfe,0x89,0x24,0x04,0x44,
   0x41,0x59,0x24,0x1c,0x00,0x02,0xff,0xd1,0x49,0x7e,0x00,0x60,0x4e,0x24,0x0f,0x45,
   0x44,0x3a,0x28,0x79,0x79,0x79,0x79,0x20,0x6d,0x6d,0x20,0x64,0x64,0x29,0x71,0x73,
   0x24,0x04,0x44,0x41,0x59,0x24,0x1f,0x00,0x24,0x04,0x44,0x41,0x59,0x24,0x1c,0x00,
   0x22,0x00,0x10,0xc0,0x81,0x53,0xff,0xd6,0x22,0x00,0x03,0x6a,0x0f,0xff,0xd1,0x24,
   0x01,0x44,0x1b,0x00,0x22,0x00,0x08,0xbc,0x81,0x0f,0xff,0xd1,0x6b,0x02,0xff,0xd1,
   0x24,0x00,0x4a,0x7e,0x00,0x05,0x51,0xfe,0x2d,0x24,0x01,0x44,0x1e,0x00,0x02,0xff,
   0xd1,0xb5,0x80,0x22,0x00,0x01,0x6a,0x53,0x00,0x00,0x4e,0x24,0x09,0x45,0x44,0x3a,
   0x57,0x41,0x54,0x45,0x52,0x53,0x71,0x73,0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x24,
   0x06,0x57,0x41,0x54,0x45,0x52,0x24,0x1f,0x00,0x6b,0x24,0x06,0x57,0x41,0x54,0x45,
   0x52,0x24,0x1c,0x00,0x24,0x00,0x4a,0x7e,0x00,0x05,0x51,0xfd,0xe9,0x24,0x06,0x57,
   0x41,0x54,0x45,0x52,0x24,0x1f,0x00,0x24,0x06,0x57,0x41,0x54,0x45,0x52,0x24,0x1c,
   0x00,0xc7,0x81,0x4e,0x24,0x07,0x45,0x44,0x3a,0x46,0x49,0x53,0x48,0x71,0x73,0x22,
   0x00,0x01,0x22,0x00,0x02,0x4c,0x24,0x05,0x46,0x49,0x53,0x48,0x24,0x1f,0x00,0x6b,
   0x24,0x05,0x46,0x49,0x53,0x48,0x24,0x1c,0x00,0x24,0x00,0x4a,0x7e,0x00,0x05,0x51,
   0xfd,0xa4,0x24,0x05,0x46,0x49,0x53,0x48,0x24,0x1f,0x00,0x24,0x05,0x46,0x49,0x53,
   0x48,0x24,0x1c,0x00,0xc7,0x81,0x0f,0xff,0xd1,0x24,0x03,0x4e,0x4f,0x25,0x1a,0x00,
   0x86,0x22,0x00,0x06,0xbc,0x81,0x4e,0x24,0x0e,0x45,0x44,0x3a,0x4e,0x4f,0x2e,0x20,
   0x4f,0x46,0x20,0x46,0x49,0x53,0x48,0x71,0x73,0x53,0xff,0xec,0x22,0x00,0x03,0x6a,
   0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x24,0x04,0x4e,0x4f,0x3a,0x20,0x71,0x73,0x22,
   0x00,0x05,0x22,0x00,0x02,0x4c,0x0f,0xff,0xd1,0x6b,0x02,0xff,0xd1,0x24,0x00,0x4a,
   0x7e,0x00,0x05,0x51,0xfd,0x40,0x24,0x03,0x4e,0x4f,0x25,0x1d,0x00,0x02,0xff,0xd1,
   0xb5,0x87,0x7f,0x53,0x00,0x00,0x0f,0xff,0xd1,0x24,0x02,0x57,0x54,0x1b,0x00,0x22,
   0x00,0x08,0xbc,0x81,0x4e,0x24,0x09,0x45,0x44,0x3a,0x57,0x45,0x49,0x47,0x48,0x54,
   0x71,0x73,0x53,0xff,0xf1,0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x24,0x04,0x57,0x54,
   0x3a,0x20,0x71,0x73,0x22,0x00,0x05,0x22,0x00,0x02,0x4c,0x0f,0xff,0xd1,0x6b,0x02,
   0xff,0xd1,0x24,0x00,0x4a,0x7e,0x00,0x05,0x51,0xfc,0xeb,0x24,0x02,0x57,0x54,0x1e,
   0x00,0x02,0xff,0xd1,0xb5,0x80,0x22,0x00,0x01,0x6a,0x53,0x00,0x00,0x4e,0x24,0x06,
   0x45,0x44,0x3a,0x46,0x4c,0x59,0x71,0x73,0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x24,
   0x04,0x46,0x4c,0x59,0x24,0x1f,0x00,0x6b,0x24,0x04,0x46,0x4c,0x59,0x24,0x1c,0x00,
   0x24,0x00,0x4a,0x7e,0x00,0x05,0x51,0xfc,0xad,0x24,0x04,0x46,0x4c,0x59,0x24,0x1f,
   0x00,0x24,0x04,0x46,0x4c,0x59,0x24,0x1c,0x00,0xc7,0x81,0x4e,0x24,0x07,0x45,0x44,
   0x3a,0x42,0x41,0x49,0x54,0x71,0x73,0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x24,0x05,
   0x42,0x41,0x49,0x54,0x24,0x1f,0x00,0x6b,0x24,0x05,0x42,0x41,0x49,0x54,0x24,0x1c,
   0x00,0x24,0x00,0x4a,0x7e,0x00,0x05,0x51,0xfc,0x6c,0x24,0x05,0x42,0x41,0x49,0x54,
   0x24,0x1f,0x00,0x24,0x05,0x42,0x41,0x49,0x54,0x24,0x1c,0x00,0xc7,0x81,0x4e,0x24,
   0x0e,0x45,0x44,0x3a,0x54,0x49,0x4d,0x45,0x20,0x4f,0x46,0x20,0x44,0x41,0x59,0x71,
   0x73,0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x24,0x05,0x54,0x49,0x4d,0x45,0x24,0x1f,
   0x00,0x6b,0x24,0x05,0x54,0x49,0x4d,0x45,0x24,0x1c,0x00,0x24,0x00,0x4a,0x7e,0x00,
   0x05,0x51,0xfc,0x22,0x24,0x05,0x54,0x49,0x4d,0x45,0x24,0x1f,0x00,0x24,0x05,0x54,
   0x49,0x4d,0x45,0x24,0x1c,0x00,0xc7,0x81,0x4e,0x24,0x07,0x45,0x44,0x3a,0x54,0x49,
   0x44,0x45,0x71,0x73,0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x24,0x05,0x54,0x49,0x44,
   0x45,0x24,0x1f,0x00,0x6b,0x24,0x05,0x54,0x49,0x44,0x45,0x24,0x1c,0x00,0x24,0x00,
   0x4a,0x7e,0x00,0x05,0x51,0xfb,0xdf,0x24,0x05,0x54,0x49,0x44,0x45,0x24,0x1f,0x00,
   0x24,0x05,0x54,0x49,0x44,0x45,0x24,0x1c,0x00,0xc7,0x81,0x4e,0x24,0x0a,0x45,0x44,
   0x3a,0x57,0x45,0x41,0x54,0x48,0x45,0x52,0x71,0x73,0x22,0x00,0x01,0x22,0x00,0x02,
   0x4c,0x24,0x05,0x43,0x4f,0x4e,0x44,0x24,0x1f,0x00,0x6b,0x24,0x05,0x43,0x4f,0x4e,
   0x44,0x24,0x1c,0x00,0x24,0x00,0x4a,0x7e,0x00,0x05,0x51,0xfb,0x99,0x24,0x05,0x43,
   0x4f,0x4e,0x44,0x24,0x1f,0x00,0x24,0x05,0x43,0x4f,0x4e,0x44,0x24,0x1c,0x00,0xc7,
   0x81,0x4e,0x4e,0x24,0x0a,0x45,0x44,0x3a,0x43,0x4f,0x4d,0x4d,0x45,0x4e,0x54,0x71,
   0x73,0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x24,0x08,0x43,0x4f,0x4d,0x4d,0x45,0x4e,
   0x54,0x24,0x1f,0x00,0x6b,0x4e,0x0d,0xff,0xce,0x24,0x17,0x53,0x41,0x56,0x45,0x2c,
   0x49,0x47,0x4e,0x4f,0x52,0x45,0x2c,0x44,0x45,0x4c,0x45,0x54,0x45,0x2c,0x51,0x55,
   0x49,0x54,0x98,0x7f,0x00,0xff,0xce,0x22,0x00,0x01,0x2c,0x7e,0x00,0x09,0x68,0x51,
   0xfb,0x34,0x51,0x00,0x27,0x00,0xff,0xce,0x22,0x00,0x02,0x2c,0x7e,0x00,0x09,0x63,
   0x51,0xfb,0xc4,0x51,0x00,0x16,0x00,0xff,0xce,0x22,0x00,0x03,0x2c,0x7e,0x00,0x09,
   0x60,0x51,0xfb,0x12,0x51,0x00,0x05,0x51,0xfb,0x0c,0x7b,0x00,0x00,0x09,0x83,0x46,
   0x49,0x53,0x48,0x43,0x52,0x20,0x20,0x00,0x02,0x80,0x00,0xb7,0x00,0xb3,0x00,0x06,
   0x00,0xa1,0x00,0x00,0x00,0x00,0x05,0x03,0x44,0x52,0x24,0x02,0x00,0x00,0x00,0x00,
   0x0d,0xff,0xfa,0x20,0x00,0x7d,0x06,0x50,0x41,0x43,0x4b,0x49,0x4e,0x87,0x7f,0x00,
   0xff,0xfa,0x22,0x00,0x00,0x2c,0x7e,0x00,0x03,0x7b,0x09,0xff,0xfc,0x24,0x04,0x46,
   0x49,0x53,0x48,0x4b,0x5e,0x00,0x02,0x04,0x44,0x41,0x59,0x24,0x02,0x06,0x57,0x41,
   0x54,0x45,0x52,0x24,0x02,0x05,0x46,0x49,0x53,0x48,0x24,0x00,0x03,0x4e,0x4f,0x25,
   0x01,0x02,0x57,0x54,0x02,0x04,0x46,0x4c,0x59,0x24,0x02,0x05,0x42,0x41,0x49,0x54,
   0x24,0x02,0x05,0x54,0x49,0x4d,0x45,0x24,0x02,0x05,0x54,0x49,0x44,0x45,0x24,0x02,
   0x05,0x43,0x4f,0x4e,0x44,0x24,0x02,0x08,0x43,0x4f,0x4d,0x4d,0x45,0x4e,0x54,0x24,
   0x01,0x01,0x44,0x88,0x4e,0x24,0x0e,0x46,0x49,0x53,0x48,0x20,0x46,0x49,0x4c,0x45,
   0x20,0x4d,0x41,0x44,0x45,0x71,0x22,0x00,0x0f,0xb8,0x71,0x24,0x04,0x4f,0x4e,0x20,
   0x20,0x71,0x09,0xff,0xfc,0x71,0x24,0x06,0x20,0x44,0x52,0x49,0x56,0x45,0x71,0x73,
   0x7b,0x00,0x00,0x09,0x83,0x46,0x49,0x53,0x48,0x4f,0x50,0x20,0x20,0x00,0x02,0x80,
   0x00,0x6a,0x00,0x66,0x00,0x04,0x00,0x55,0x00,0x00,0x00,0x00,0x04,0x02,0x46,0x24,
   0x02,0x00,0x00,0x00,0x00,0x09,0xff,0xfc,0x5a,0x65,0x00,0x02,0x04,0x44,0x41,0x59,
   0x24,0x02,0x06,0x57,0x41,0x54,0x45,0x52,0x24,0x02,0x05,0x46,0x49,0x53,0x48,0x24,
   0x00,0x03,0x4e,0x4f,0x25,0x01,0x02,0x57,0x54,0x02,0x04,0x46,0x4c,0x59,0x24,0x02,
   0x05,0x42,0x41,0x49,0x54,0x24,0x02,0x05,0x54,0x49,0x4d,0x45,0x24,0x02,0x05,0x54,
   0x49,0x44,0x45,0x24,0x02,0x05,0x43,0x4f,0x4e,0x44,0x24,0x02,0x08,0x43,0x4f,0x4d,
   0x4d,0x45,0x4e,0x54,0x24,0x01,0x01,0x44,0x88,0x7b,0x00,0x00,0x09,0x83,0x46,0x49,
   0x53,0x48,0x52,0x45,0x50,0x20,0x00,0x02,0x80,0x0a,0x9a,0x0a,0x96,0x02,0x9b,0x0a,
   0x45,0x00,0x00,0x24,0x02,0x52,0x24,0x05,0xfe,0x6d,0x02,0x43,0x25,0x00,0xfe,0x6a,
   0x03,0x42,0x49,0x47,0x01,0xfe,0x62,0x05,0x42,0x44,0x41,0x59,0x24,0x02,0xfe,0x51,
   0x04,0x43,0x4f,0x4d,0x24,0x02,0xfe,0x3f,0x00,0x00,0x00,0x18,0xfe,0x6c,0x20,0xfe,
   0x50,0x10,0xfe,0x3e,0x10,0xfe,0x1e,0x02,0xfe,0x1a,0x02,0xfe,0x14,0x04,0xfd,0x89,
   0x10,0xfd,0x65,0x20,0x00,0x08,0xfe,0x6d,0x00,0x0b,0xfd,0x8a,0x00,0x08,0x4e,0x0d,
   0xfe,0x32,0x24,0x10,0x46,0x49,0x53,0x48,0x49,0x4e,0x47,0x20,0x52,0x45,0x53,0x55,
   0x4c,0x54,0x53,0x3a,0x98,0x7f,0x00,0xfe,0x32,0x22,0x00,0x01,0x2b,0x7e,0x00,0x03,
   0x7b,0x22,0x00,0x03,0x6a,0x53,0xff,0xff,0x4e,0x24,0x08,0x46,0x52,0x4f,0x4d,0x20,
   0x64,0x64,0x20,0x71,0x73,0x22,0x00,0x06,0x22,0x00,0x02,0x4c,0x0f,0xfe,0x1f,0x6e,
   0x02,0xfe,0x1f,0x24,0x00,0x4a,0x7e,0x00,0x22,0x0e,0xfe,0x2a,0x22,0x00,0x00,0x86,
   0x80,0x0f,0xfd,0x66,0x24,0x0f,0x46,0x52,0x4f,0x4d,0x3a,0x20,0x42,0x45,0x47,0x49,
   0x4e,0x4e,0x49,0x4e,0x47,0x81,0x51,0x00,0x72,0x22,0x00,0x09,0x22,0x00,0x01,0x4c,
   0x24,0x02,0x6d,0x6d,0x71,0x73,0x22,0x00,0x09,0x22,0x00,0x02,0x4c,0x0f,0xfe,0x1b,
   0x6e,0x22,0x00,0x0c,0x22,0x00,0x01,0x4c,0x24,0x04,0x79,0x79,0x79,0x79,0x71,0x73,
   0x22,0x00,0x0c,0x22,0x00,0x02,0x4c,0x0f,0xfe,0x15,0x6e,0x0e,0xfe,0x2a,0x02,0xfe,
   0x1f,0xb5,0x02,0xfe,0x1b,0xb5,0x22,0x00,0x64,0x86,0x3e,0x3c,0x02,0xfe,0x15,0xb5,
   0x22,0x27,0x10,0x86,0x3e,0x3c,0x80,0x0f,0xfd,0x66,0x24,0x05,0x46,0x52,0x4f,0x4d,
   0x3a,0x02,0xfe,0x15,0x4b,0x24,0x01,0x2f,0x4b,0x02,0xfe,0x1b,0x4b,0x24,0x01,0x2f,
   0x4b,0x02,0xfe,0x1f,0x4b,0x81,0x53,0x00,0x00,0x53,0x00,0x00,0x53,0xff,0xfc,0x4e,
   0x24,0x08,0x20,0x54,0x4f,0x20,0x20,0x64,0x64,0x20,0x71,0x73,0x22,0x00,0x06,0x22,
   0x00,0x02,0x4c,0x0f,0xfe,0x1f,0x6e,0x02,0xfe,0x1f,0x24,0x00,0x4a,0x02,0xfe,0x1f,
   0x24,0x03,0x41,0x4c,0x4c,0x4a,0x35,0x7e,0x00,0x29,0x0e,0xfe,0x22,0x23,0x05,0x99,
   0x99,0x99,0x99,0x07,0x80,0x0f,0xfd,0x66,0x02,0xfd,0x66,0x24,0x0f,0x20,0x54,0x4f,
   0x3a,0x45,0x4e,0x44,0x20,0x4f,0x46,0x20,0x46,0x49,0x4c,0x45,0x4b,0x81,0x51,0x00,
   0x76,0x22,0x00,0x09,0x22,0x00,0x01,0x4c,0x24,0x02,0x6d,0x6d,0x71,0x73,0x22,0x00,
   0x09,0x22,0x00,0x02,0x4c,0x0f,0xfe,0x1b,0x6e,0x22,0x00,0x0c,0x22,0x00,0x01,0x4c,
   0x24,0x04,0x79,0x79,0x79,0x79,0x71,0x73,0x22,0x00,0x0c,0x22,0x00,0x02,0x4c,0x0f,
   0xfe,0x15,0x6e,0x0e,0xfe,0x22,0x02,0xfe,0x1f,0xb5,0x02,0xfe,0x1b,0xb5,0x22,0x00,
   0x64,0x86,0x3e,0x3c,0x02,0xfe,0x15,0xb5,0x22,0x27,0x10,0x86,0x3e,0x3c,0x80,0x0f,
   0xfd,0x66,0x02,0xfd,0x66,0x24,0x05,0x20,0x20,0x54,0x4f,0x3a,0x4b,0x02,0xfe,0x15,
   0x4b,0x24,0x01,0x2f,0x4b,0x02,0xfe,0x1b,0x4b,0x24,0x01,0x2f,0x4b,0x02,0xfe,0x1f,
   0x4b,0x81,0x53,0x00,0x00,0x53,0x00,0x00,0x22,0x00,0x01,0x6a,0x0d,0xfd,0x87,0x22,
   0x00,0x01,0x7f,0x4e,0x24,0x0c,0x45,0x4e,0x54,0x45,0x52,0x20,0x57,0x41,0x54,0x45,
   0x52,0x53,0x71,0x73,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x6e,0x00,0xfd,0x87,0x05,0xfd,
   0x8a,0x24,0x00,0x4a,0x00,0xfd,0x87,0x05,0xfd,0x8a,0x24,0x03,0x41,0x4c,0x4c,0x4a,
   0x35,0x7e,0x00,0x0b,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x00,0x81,0x0d,0xfd,0x87,
   0x00,0xfd,0x87,0x22,0x00,0x01,0x2d,0x7f,0x0d,0xfe,0x32,0x24,0x26,0x41,0x4c,0x4c,
   0x2c,0x53,0x41,0x4c,0x4d,0x4f,0x4e,0x2c,0x53,0x45,0x41,0x2d,0x54,0x52,0x4f,0x55,
   0x54,0x2c,0x42,0x52,0x4f,0x57,0x4e,0x2d,0x54,0x52,0x4f,0x55,0x54,0x2c,0x4f,0x54,
   0x48,0x45,0x52,0x98,0x7f,0x00,0xfe,0x32,0x22,0x00,0x01,0x2c,0x7e,0x00,0x0e,0x00,
   0xfd,0x87,0x12,0xfd,0x8a,0x24,0x00,0x81,0x51,0x00,0x90,0x00,0xfe,0x32,0x22,0x00,
   0x02,0x2c,0x7e,0x00,0x14,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x06,0x53,0x41,0x4c,
   0x4d,0x4f,0x4e,0x81,0x51,0x00,0x74,0x00,0xfe,0x32,0x22,0x00,0x03,0x2c,0x7e,0x00,
   0x17,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x09,0x53,0x45,0x41,0x2d,0x54,0x52,0x4f,
   0x55,0x54,0x81,0x51,0x00,0x55,0x00,0xfe,0x32,0x22,0x00,0x04,0x2c,0x7e,0x00,0x19,
   0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x0b,0x42,0x52,0x4f,0x57,0x4e,0x2d,0x54,0x52,
   0x4f,0x55,0x54,0x81,0x51,0x00,0x34,0x00,0xfe,0x32,0x22,0x00,0x05,0x2c,0x7e,0x00,
   0x29,0x4e,0x24,0x0a,0x45,0x4e,0x54,0x45,0x52,0x20,0x46,0x49,0x53,0x48,0x71,0x73,
   0x00,0xfd,0x87,0x12,0xfd,0x8a,0x6e,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x00,0xfd,0x87,
   0x05,0xfd,0x8a,0xc7,0x81,0x51,0x00,0x03,0x7b,0x0d,0xfd,0x87,0x00,0xfd,0x87,0x22,
   0x00,0x01,0x2d,0x7f,0x0d,0xfe,0x32,0x24,0x0c,0x41,0x4c,0x4c,0x2c,0x46,0x4c,0x59,
   0x2c,0x42,0x41,0x49,0x54,0x98,0x7f,0x00,0xfe,0x32,0x22,0x00,0x01,0x2c,0x7e,0x00,
   0x0e,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x00,0x81,0x51,0x00,0x48,0x00,0xfe,0x32,
   0x22,0x00,0x02,0x2c,0x7e,0x00,0x1a,0x4e,0x24,0x09,0x45,0x4e,0x54,0x45,0x52,0x20,
   0x46,0x4c,0x59,0x71,0x73,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x6e,0x51,0x00,0x26,0x00,
   0xfe,0x32,0x22,0x00,0x03,0x2c,0x7e,0x00,0x1b,0x4e,0x24,0x0a,0x45,0x4e,0x54,0x45,
   0x52,0x20,0x42,0x41,0x49,0x54,0x71,0x73,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x6e,0x51,
   0x00,0x03,0x7b,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x00,0xfd,0x87,0x05,0xfd,0x8a,0xc7,
   0x81,0x0d,0xfd,0x87,0x00,0xfd,0x87,0x22,0x00,0x01,0x2d,0x7f,0x0d,0xfe,0x32,0x24,
   0x14,0x41,0x4c,0x4c,0x2c,0x41,0x4d,0x2c,0x50,0x4d,0x2c,0x4e,0x4f,0x4f,0x4e,0x2c,
   0x4e,0x49,0x47,0x48,0x54,0x98,0x7f,0x00,0xfe,0x32,0x22,0x00,0x01,0x2c,0x7e,0x00,
   0x0e,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x00,0x81,0x51,0x00,0x68,0x00,0xfe,0x32,
   0x22,0x00,0x02,0x2c,0x7e,0x00,0x10,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x02,0x41,
   0x4d,0x81,0x51,0x00,0x50,0x00,0xfe,0x32,0x22,0x00,0x03,0x2c,0x7e,0x00,0x10,0x00,
   0xfd,0x87,0x12,0xfd,0x8a,0x24,0x02,0x50,0x4d,0x81,0x51,0x00,0x38,0x00,0xfe,0x32,
   0x22,0x00,0x04,0x2c,0x7e,0x00,0x12,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x04,0x4e,
   0x4f,0x4f,0x4e,0x81,0x51,0x00,0x1e,0x00,0xfe,0x32,0x22,0x00,0x05,0x2c,0x7e,0x00,
   0x13,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x05,0x4e,0x49,0x47,0x48,0x54,0x81,0x51,
   0x00,0x03,0x7b,0x0d,0xfd,0x87,0x00,0xfd,0x87,0x22,0x00,0x01,0x2d,0x7f,0x0d,0xfe,
   0x32,0x24,0x1c,0x41,0x4c,0x4c,0x2c,0x48,0x49,0x2d,0x54,0x49,0x44,0x45,0x2c,0x4d,
   0x49,0x44,0x2d,0x54,0x49,0x44,0x45,0x2c,0x4c,0x4f,0x2d,0x54,0x49,0x44,0x45,0x98,
   0x7f,0x00,0xfe,0x32,0x22,0x00,0x01,0x2c,0x7e,0x00,0x0e,0x00,0xfd,0x87,0x12,0xfd,
   0x8a,0x24,0x00,0x81,0x51,0x00,0x5e,0x00,0xfe,0x32,0x22,0x00,0x02,0x2c,0x7e,0x00,
   0x17,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x09,0x48,0x49,0x47,0x48,0x2d,0x54,0x49,
   0x44,0x45,0x81,0x51,0x00,0x3f,0x00,0xfe,0x32,0x22,0x00,0x03,0x2c,0x7e,0x00,0x16,
   0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x08,0x4d,0x49,0x44,0x2d,0x54,0x49,0x44,0x45,
   0x81,0x51,0x00,0x21,0x00,0xfe,0x32,0x22,0x00,0x04,0x2c,0x7e,0x00,0x16,0x00,0xfd,
   0x87,0x12,0xfd,0x8a,0x24,0x08,0x4c,0x4f,0x57,0x2d,0x54,0x49,0x44,0x45,0x81,0x51,
   0x00,0x03,0x7b,0x0d,0xfd,0x87,0x00,0xfd,0x87,0x22,0x00,0x01,0x2d,0x7f,0x0d,0xfe,
   0x32,0x24,0x24,0x41,0x4c,0x4c,0x2c,0x43,0x4c,0x4f,0x55,0x44,0x59,0x2c,0x42,0x52,
   0x49,0x47,0x48,0x54,0x2c,0x52,0x41,0x49,0x4e,0x2c,0x54,0x48,0x55,0x4e,0x44,0x45,
   0x52,0x2c,0x4f,0x54,0x48,0x45,0x52,0x98,0x7f,0x00,0xfe,0x32,0x22,0x00,0x01,0x2c,
   0x7e,0x00,0x0e,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x00,0x81,0x51,0x00,0xa6,0x00,
   0xfe,0x32,0x22,0x00,0x02,0x2c,0x7e,0x00,0x14,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,
   0x06,0x43,0x4c,0x4f,0x55,0x44,0x59,0x81,0x51,0x00,0x8a,0x00,0xfe,0x32,0x22,0x00,
   0x03,0x2c,0x7e,0x00,0x14,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x06,0x42,0x52,0x49,
   0x47,0x48,0x54,0x81,0x51,0x00,0x6e,0x00,0xfe,0x32,0x22,0x00,0x04,0x2c,0x7e,0x00,
   0x12,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x24,0x04,0x52,0x41,0x49,0x4e,0x81,0x51,0x00,
   0x54,0x00,0xfe,0x32,0x22,0x00,0x05,0x2c,0x7e,0x00,0x15,0x00,0xfd,0x87,0x12,0xfd,
   0x8a,0x24,0x07,0x54,0x48,0x55,0x4e,0x44,0x45,0x52,0x81,0x51,0x00,0x37,0x00,0xfe,
   0x32,0x22,0x00,0x06,0x2c,0x7e,0x00,0x2c,0x4e,0x24,0x0d,0x45,0x4e,0x54,0x45,0x52,
   0x20,0x57,0x45,0x41,0x54,0x48,0x45,0x52,0x71,0x73,0x00,0xfd,0x87,0x12,0xfd,0x8a,
   0x6e,0x00,0xfd,0x87,0x12,0xfd,0x8a,0x00,0xfd,0x87,0x05,0xfd,0x8a,0xc7,0x81,0x51,
   0x00,0x03,0x7b,0x0d,0xfd,0x87,0x00,0xfd,0x87,0x22,0x00,0x01,0x2d,0x7f,0x4e,0x24,
   0x0b,0x43,0x4f,0x4d,0x4d,0x45,0x4e,0x54,0x20,0x3d,0x20,0x3f,0x71,0x73,0x00,0xfd,
   0x87,0x12,0xfd,0x8a,0x6e,0x4e,0x24,0x10,0x50,0x6c,0x65,0x61,0x73,0x65,0x20,0x77,
   0x61,0x69,0x74,0x2e,0x2e,0x2e,0x2e,0x2e,0x71,0x73,0x61,0x0d,0xfe,0x3c,0x22,0x00,
   0x00,0x7f,0x0e,0xfe,0x34,0x22,0x00,0x00,0x86,0x80,0x0e,0xfe,0x62,0x22,0x00,0x00,
   0x86,0x80,0x0f,0xfe,0x51,0x24,0x00,0x81,0xa3,0x33,0x7e,0x01,0x40,0x24,0x01,0x44,
   0x1b,0x00,0x01,0xfe,0x2a,0x39,0x24,0x01,0x44,0x1b,0x00,0x01,0xfe,0x22,0x37,0x34,
   0x7e,0x01,0x26,0x24,0x06,0x57,0x41,0x54,0x45,0x52,0x24,0x1c,0x00,0x22,0x00,0x01,
   0x05,0xfd,0x8a,0x4a,0x22,0x00,0x01,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x35,0x7e,0x01,
   0x08,0x24,0x05,0x46,0x49,0x53,0x48,0x24,0x1c,0x00,0x22,0x00,0x02,0x05,0xfd,0x8a,
   0x4a,0x22,0x00,0x02,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x35,0x7e,0x00,0xeb,0x24,0x04,
   0x46,0x4c,0x59,0x24,0x1c,0x00,0x22,0x00,0x03,0x05,0xfd,0x8a,0x4a,0x24,0x05,0x42,
   0x41,0x49,0x54,0x24,0x1c,0x00,0x22,0x00,0x03,0x05,0xfd,0x8a,0x4a,0x35,0x22,0x00,
   0x03,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x35,0x7e,0x00,0xbe,0x24,0x05,0x54,0x49,0x4d,
   0x45,0x24,0x1c,0x00,0x22,0x00,0x04,0x05,0xfd,0x8a,0x4a,0x22,0x00,0x04,0x05,0xfd,
   0x8a,0x24,0x00,0x4a,0x35,0x7e,0x00,0xa1,0x24,0x05,0x54,0x49,0x44,0x45,0x24,0x1c,
   0x00,0x22,0x00,0x05,0x05,0xfd,0x8a,0x4a,0x22,0x00,0x05,0x05,0xfd,0x8a,0x24,0x00,
   0x4a,0x35,0x7e,0x00,0x84,0x24,0x05,0x43,0x4f,0x4e,0x44,0x24,0x1c,0x00,0x22,0x00,
   0x06,0x05,0xfd,0x8a,0x4a,0x22,0x00,0x06,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x35,0x24,
   0x08,0x43,0x4f,0x4d,0x4d,0x45,0x4e,0x54,0x24,0x1c,0x00,0x22,0x00,0x07,0x05,0xfd,
   0x8a,0x22,0x00,0x10,0xc0,0x4a,0x22,0x00,0x07,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x35,
   0x34,0x7e,0x00,0x45,0x0d,0xfe,0x3c,0x00,0xfe,0x3c,0x24,0x03,0x4e,0x4f,0x25,0x1a,
   0x00,0x2d,0x7f,0x0e,0xfe,0x34,0x01,0xfe,0x34,0x24,0x02,0x57,0x54,0x1b,0x00,0x3c,
   0x80,0x20,0x00,0x7d,0x07,0x46,0x49,0x53,0x48,0x42,0x49,0x47,0x84,0x22,0x00,0x01,
   0x22,0x00,0x02,0x4c,0x00,0xfe,0x3c,0x6f,0x24,0x0b,0x20,0x46,0x69,0x73,0x68,0x20,
   0x66,0x6f,0x75,0x6e,0x64,0x71,0x73,0x63,0x51,0xfe,0xbf,0x0d,0xfe,0x6a,0x22,0x00,
   0x01,0x7f,0x22,0x00,0x01,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x7e,0x00,0x15,0x22,0x00,
   0x01,0x12,0xfd,0x8a,0x24,0x0a,0x41,0x4c,0x4c,0x20,0x57,0x41,0x54,0x45,0x52,0x53,
   0x81,0x22,0x00,0x02,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x7e,0x00,0x13,0x22,0x00,0x02,
   0x12,0xfd,0x8a,0x24,0x08,0x41,0x4c,0x4c,0x20,0x46,0x49,0x53,0x48,0x81,0x22,0x00,
   0x03,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x7e,0x00,0x19,0x22,0x00,0x03,0x12,0xfd,0x8a,
   0x24,0x0e,0x41,0x4c,0x4c,0x20,0x46,0x4c,0x59,0x53,0x2f,0x42,0x41,0x49,0x54,0x53,
   0x81,0x22,0x00,0x04,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x7e,0x00,0x1b,0x22,0x00,0x04,
   0x12,0xfd,0x8a,0x24,0x10,0x41,0x4c,0x4c,0x20,0x54,0x49,0x4d,0x45,0x53,0x20,0x4f,
   0x46,0x20,0x44,0x41,0x59,0x81,0x22,0x00,0x05,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x7e,
   0x00,0x13,0x22,0x00,0x05,0x12,0xfd,0x8a,0x24,0x08,0x4e,0x4f,0x20,0x54,0x49,0x44,
   0x45,0x53,0x81,0x22,0x00,0x06,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x7e,0x00,0x17,0x22,
   0x00,0x06,0x12,0xfd,0x8a,0x24,0x0c,0x41,0x4c,0x4c,0x20,0x57,0x45,0x41,0x54,0x48,
   0x45,0x52,0x53,0x81,0x22,0x00,0x07,0x05,0xfd,0x8a,0x24,0x00,0x4a,0x7e,0x00,0x15,
   0x22,0x00,0x07,0x12,0xfd,0x8a,0x24,0x0a,0x4e,0x4f,0x20,0x43,0x4f,0x4d,0x4d,0x45,
   0x4e,0x54,0x81,0x0d,0xfd,0x87,0x22,0x00,0x01,0x7f,0x00,0xfd,0x87,0x12,0xfd,0x8a,
   0x00,0xfd,0x87,0x05,0xfd,0x8a,0x20,0x02,0x20,0x01,0x7d,0x07,0x43,0x45,0x4e,0x54,
   0x52,0x45,0x24,0x81,0x0d,0xfd,0x87,0x00,0xfd,0x87,0x22,0x00,0x01,0x2d,0x7f,0x00,
   0xfd,0x87,0x22,0x00,0x08,0x2c,0x7e,0xff,0xd3,0x0d,0xfe,0x6a,0x22,0x00,0x01,0x7f,
   0x00,0xfe,0x6a,0x12,0xfe,0x6d,0x24,0x1f,0x46,0x49,0x53,0x48,0x49,0x4e,0x47,0x20,
   0x52,0x45,0x53,0x55,0x4c,0x54,0x53,0x20,0x20,0x46,0x4f,0x52,0x20,0x46,0x4f,0x4c,
   0x4c,0x4f,0x57,0x49,0x4e,0x47,0x3a,0x81,0x0d,0xfe,0x6a,0x00,0xfe,0x6a,0x22,0x00,
   0x01,0x2d,0x7f,0x00,0xfe,0x6a,0x12,0xfe,0x6d,0x02,0xfd,0x66,0x81,0x0d,0xfe,0x6a,
   0x00,0xfe,0x6a,0x22,0x00,0x01,0x2d,0x7f,0x00,0xfe,0x6a,0x12,0xfe,0x6d,0x22,0x00,
   0x01,0x05,0xfd,0x8a,0x22,0x00,0x0f,0xb8,0x4b,0x22,0x00,0x02,0x05,0xfd,0x8a,0x4b,
   0x81,0x0d,0xfe,0x6a,0x00,0xfe,0x6a,0x22,0x00,0x01,0x2d,0x7f,0x00,0xfe,0x6a,0x12,
   0xfe,0x6d,0x22,0x00,0x03,0x05,0xfd,0x8a,0x22,0x00,0x0f,0xb8,0x4b,0x22,0x00,0x04,
   0x05,0xfd,0x8a,0x4b,0x81,0x0d,0xfe,0x6a,0x00,0xfe,0x6a,0x22,0x00,0x01,0x2d,0x7f,
   0x00,0xfe,0x6a,0x12,0xfe,0x6d,0x22,0x00,0x05,0x05,0xfd,0x8a,0x22,0x00,0x0f,0xb8,
   0x4b,0x22,0x00,0x06,0x05,0xfd,0x8a,0x4b,0x81,0x0d,0xfe,0x6a,0x00,0xfe,0x6a,0x22,
   0x00,0x01,0x2d,0x7f,0x00,0xfe,0x6a,0x12,0xfe,0x6d,0x24,0x0b,0x20,0x20,0x20,0x20,
   0x43,0x4f,0x4d,0x4d,0x45,0x4e,0x54,0x22,0x00,0x0f,0xb8,0x4b,0x22,0x00,0x07,0x05,
   0xfd,0x8a,0x4b,0x81,0x0d,0xfe,0x6a,0x00,0xfe,0x6a,0x22,0x00,0x01,0x2d,0x7f,0x00,
   0xfe,0x6a,0x12,0xfe,0x6d,0x24,0x0d,0x4e,0x4f,0x2e,0x4f,0x46,0x20,0x46,0x49,0x53,
   0x48,0x20,0x3d,0x20,0x22,0x00,0x0f,0xb8,0x4b,0x00,0xfe,0x3c,0x86,0x22,0x00,0x00,
   0x22,0x00,0x06,0xbb,0x4b,0x81,0x0d,0xfe,0x6a,0x00,0xfe,0x6a,0x22,0x00,0x01,0x2d,
   0x7f,0x00,0xfe,0x6a,0x12,0xfe,0x6d,0x24,0x0b,0x54,0x4f,0x54,0x41,0x4c,0x20,0x57,
   0x54,0x20,0x3d,0x20,0x22,0x00,0x0f,0xb8,0x4b,0x01,0xfe,0x34,0x22,0x00,0x02,0x22,
   0x00,0x08,0xbb,0x4b,0x81,0x0d,0xfe,0x6a,0x00,0xfe,0x6a,0x22,0x00,0x01,0x2d,0x7f,
   0x00,0xfe,0x3c,0x22,0x00,0x00,0x29,0x7e,0x00,0x2e,0x00,0xfe,0x6a,0x12,0xfe,0x6d,
   0x24,0x0b,0x41,0x56,0x45,0x52,0x41,0x47,0x45,0x20,0x57,0x54,0x3d,0x22,0x00,0x0f,
   0xb8,0x4b,0x01,0xfe,0x34,0x00,0xfe,0x3c,0x86,0x3f,0x22,0x00,0x02,0x22,0x00,0x08,
   0xbb,0x4b,0x81,0x51,0x00,0x1f,0x00,0xfe,0x6a,0x12,0xfe,0x6d,0x24,0x0b,0x41,0x56,
   0x45,0x52,0x41,0x47,0x45,0x20,0x57,0x54,0x3d,0x22,0x00,0x0f,0xb8,0x4b,0x24,0x01,
   0x30,0x4b,0x81,0x0d,0xfe,0x6a,0x00,0xfe,0x6a,0x22,0x00,0x01,0x2d,0x7f,0x00,0xfe,
   0x6a,0x12,0xfe,0x6d,0x24,0x0a,0x42,0x45,0x53,0x54,0x20,0x46,0x49,0x53,0x48,0x3d,
   0x01,0xfe,0x62,0x22,0x00,0x01,0x22,0x00,0x05,0xbb,0x4b,0x22,0x00,0x0f,0xb8,0x4b,
   0x02,0xfe,0x51,0x4b,0x81,0x00,0xfe,0x3c,0x22,0x00,0x00,0x2c,0x7e,0x00,0x17,0x22,
   0x00,0x05,0x20,0x00,0x20,0x01,0x7d,0x08,0x46,0x49,0x53,0x48,0x4d,0x45,0x53,0x53,
   0x84,0x51,0x00,0x14,0x22,0x00,0x0c,0x20,0x00,0x20,0x01,0x7d,0x08,0x46,0x49,0x53,
   0x48,0x4d,0x45,0x53,0x53,0x84,0x4e,0x20,0x00,0x7d,0x06,0x52,0x45,0x53,0x55,0x4c,
   0x54,0x84,0x7b,0x00,0x00,0x09,0x83,0x50,0x41,0x43,0x4b,0x49,0x4e,0x20,0x20,0x00,
   0x02,0x80,0x00,0x59,0x00,0x55,0x00,0x06,0x00,0x43,0x00,0x00,0x00,0x00,0x05,0x03,
   0x44,0x52,0x24,0x02,0x00,0x00,0x00,0x00,0x0d,0xff,0xfa,0x24,0x18,0x41,0x2d,0x52,
   0x41,0x4d,0x2c,0x42,0x2d,0x50,0x41,0x43,0x4b,0x2c,0x43,0x2d,0x50,0x41,0x43,0x4b,
   0x2c,0x51,0x55,0x49,0x54,0x98,0x7f,0x00,0xff,0xfa,0x22,0x00,0x00,0x2c,0x7e,0x00,
   0x03,0x7b,0x16,0xff,0xfc,0x22,0x00,0x41,0x00,0xff,0xfa,0x2d,0x22,0x00,0x01,0x2e,
   0xb8,0x24,0x01,0x3a,0x4b,0x81,0x00,0xff,0xfa,0x86,0x79,0x00,0x00,0x09,0x83,0x45,
   0x58,0x49,0x53,0x54,0x24,0x20,0x20,0x00,0x02,0x80,0x00,0x57,0x00,0x53,0x00,0x16,
   0x00,0x3f,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x06,0xff,0xf8,0x02,0xff,0xec,0x0a,
   0x00,0x00,0x0f,0xff,0xf9,0x00,0xff,0xea,0x22,0x00,0x41,0x2d,0xb8,0x24,0x01,0x3a,
   0x4b,0x81,0x02,0xff,0xf9,0x09,0xff,0xfc,0x4b,0xa4,0x7e,0x00,0x0d,0x0f,0xff,0xed,
   0x02,0xff,0xf9,0x09,0xff,0xfc,0x4b,0x81,0x0d,0xff,0xea,0x00,0xff,0xea,0x22,0x00,
   0x01,0x2d,0x7f,0x00,0xff,0xea,0x22,0x00,0x03,0x2c,0x7e,0xff,0xc7,0x02,0xff,0xed,
   0x79,0x00,0x00,0x09,0x83,0x52,0x45,0x53,0x55,0x4c,0x54,0x20,0x20,0x00,0x02,0x80,
   0x00,0xc4,0x00,0xc0,0x00,0x0a,0x00,0xab,0x00,0x00,0x00,0x00,0x08,0x02,0x52,0x24,
   0x05,0x02,0x43,0x25,0x00,0x00,0x00,0x00,0x00,0x0d,0xff,0xf8,0x22,0x00,0x01,0x7f,
   0x4e,0x24,0x04,0x55,0x53,0x45,0x20,0x71,0x22,0x00,0x06,0xb8,0x71,0x24,0x05,0x20,
   0x41,0x4e,0x44,0x20,0x71,0x22,0x00,0x07,0xb8,0x71,0x22,0x00,0x0f,0xb8,0x71,0x24,
   0x0b,0x63,0x6c,0x65,0x61,0x72,0x20,0x3d,0x20,0x65,0x6e,0x64,0x71,0x73,0x22,0x00,
   0x1e,0x54,0x4e,0x00,0xff,0xf8,0x0c,0xff,0xfc,0x71,0x73,0x0d,0xff,0xf6,0x91,0x7f,
   0x00,0xff,0xf6,0x22,0x00,0x01,0x2c,0x7e,0x00,0x06,0x7b,0x51,0x00,0x2f,0x00,0xff,
   0xf6,0x22,0x00,0x03,0x2c,0x7e,0x00,0x10,0x0d,0xff,0xf8,0x00,0xff,0xf8,0x22,0x00,
   0x01,0x2e,0x7f,0x51,0x00,0x17,0x00,0xff,0xf6,0x22,0x00,0x04,0x2c,0x7e,0x00,0x0d,
   0x0d,0xff,0xf8,0x00,0xff,0xf8,0x22,0x00,0x01,0x2d,0x7f,0x00,0xff,0xf8,0x22,0x00,
   0x01,0x27,0x7e,0x00,0x0c,0x0d,0xff,0xf8,0x22,0x00,0x01,0x7f,0x51,0x00,0x13,0x00,
   0xff,0xf8,0x07,0xff,0xfa,0x29,0x7e,0x00,0x09,0x0d,0xff,0xf8,0x07,0xff,0xfa,0x7f,
   0x51,0xff,0x91,0x7b,0x00,0x00,0x09,0x83,0x46,0x49,0x53,0x48,0x42,0x49,0x47,0x20,
   0x00,0x02,0x80,0x00,0x41,0x00,0x3d,0x00,0x06,0x00,0x24,0x00,0x00,0x00,0x00,0x0c,
   0x03,0x42,0x49,0x47,0x01,0x05,0x42,0x44,0x41,0x59,0x24,0x02,0x00,0x00,0x00,0x00,
   0x24,0x02,0x57,0x54,0x1b,0x00,0x08,0xff,0xfc,0x38,0x7e,0x00,0x18,0x15,0xff,0xfc,
   0x24,0x02,0x57,0x54,0x1b,0x00,0x80,0x16,0xff,0xfa,0x24,0x04,0x44,0x41,0x59,0x24,
   0x1c,0x00,0x81,0x7b,0x00,0x00,0x09,0x83,0x46,0x49,0x53,0x48,0x4d,0x45,0x53,0x53,
   0x00,0x02,0x80,0x02,0xa6,0x02,0xa2,0x01,0x99,0x02,0x85,0x01,0x00,0x00,0x00,0x00,
   0x08,0x02,0x43,0x25,0x00,0x02,0x52,0x24,0x05,0x00,0x03,0xfe,0x69,0x20,0x00,0x04,
   0xfe,0x6a,0x00,0x0c,0x22,0x00,0x01,0x12,0xfe,0x6a,0x24,0x0e,0x20,0x57,0x68,0x61,
   0x74,0x21,0x20,0x4e,0x6f,0x20,0x66,0x69,0x73,0x68,0x22,0x00,0x0f,0xb8,0x4b,0x24,
   0x05,0x20,0x20,0x20,0x20,0x20,0x4b,0x22,0x00,0xb5,0xb8,0x22,0x00,0x05,0xc5,0x4b,
   0x81,0x22,0x00,0x02,0x12,0xfe,0x6a,0x24,0x0e,0x4e,0x6f,0x74,0x20,0x6d,0x75,0x63,
   0x68,0x20,0x6c,0x75,0x63,0x6b,0x21,0x22,0x00,0x0f,0xb8,0x4b,0x24,0x05,0x20,0x20,
   0x20,0x20,0x20,0x4b,0x22,0x00,0xb3,0xb8,0x22,0x00,0x05,0xc5,0x4b,0x81,0x22,0x00,
   0x03,0x12,0xfe,0x6a,0x24,0x0c,0x20,0x20,0x54,0x72,0x79,0x20,0x61,0x67,0x61,0x69,
   0x6e,0x21,0x22,0x00,0x0f,0xb8,0x4b,0x24,0x05,0x20,0x20,0x20,0x20,0x20,0x4b,0x24,
   0x01,0x3a,0x22,0x00,0x05,0xc5,0x4b,0x81,0x22,0x00,0x04,0x12,0xfe,0x6a,0x24,0x0f,
   0x43,0x68,0x61,0x6e,0x67,0x65,0x20,0x79,0x6f,0x75,0x72,0x20,0x72,0x6f,0x64,0x22,
   0x00,0x0f,0xb8,0x4b,0x24,0x05,0x20,0x20,0x20,0x20,0x20,0x4b,0x22,0x00,0xb2,0xb8,
   0x22,0x00,0x05,0xc5,0x4b,0x81,0x22,0x00,0x05,0x12,0xfe,0x6a,0x24,0x0d,0x20,0x20,
   0x47,0x6f,0x6f,0x64,0x20,0x43,0x61,0x74,0x63,0x68,0x20,0x22,0x00,0x0f,0xb8,0x4b,
   0x24,0x05,0x20,0x20,0x20,0x20,0x20,0x4b,0x22,0x00,0xfb,0xb8,0x22,0x00,0x05,0xc5,
   0x4b,0x81,0x22,0x00,0x06,0x12,0xfe,0x6a,0x24,0x0d,0x20,0x20,0x51,0x75,0x69,0x74,
   0x65,0x20,0x61,0x20,0x62,0x61,0x67,0x22,0x00,0x0f,0xb8,0x4b,0x24,0x05,0x20,0x20,
   0x20,0x20,0x20,0x4b,0x22,0x00,0xfc,0xb8,0x22,0x00,0x05,0xc5,0x4b,0x81,0x22,0x00,
   0x07,0x12,0xfe,0x6a,0x24,0x0d,0x20,0x20,0x54,0x69,0x67,0x68,0x74,0x20,0x6c,0x69,
   0x6e,0x65,0x73,0x22,0x00,0x0f,0xb8,0x4b,0x24,0x05,0x20,0x20,0x20,0x20,0x20,0x4b,
   0x22,0x00,0xb2,0xb8,0x22,0x00,0x05,0xc5,0x4b,0x81,0x22,0x00,0x08,0x12,0xfe,0x6a,
   0x24,0x0f,0x4b,0x65,0x65,0x70,0x20,0x74,0x68,0x65,0x20,0x72,0x6f,0x64,0x20,0x75,
   0x70,0x22,0x00,0x0f,0xb8,0x4b,0x24,0x05,0x20,0x20,0x20,0x20,0x20,0x4b,0x24,0x01,
   0x2f,0x22,0x00,0x05,0xc5,0x4b,0x81,0x22,0x00,0x09,0x12,0xfe,0x6a,0x24,0x0f,0x20,
   0x20,0x2a,0x2a,0x20,0x57,0x4f,0x57,0x21,0x20,0x2a,0x2a,0x20,0x20,0x20,0x22,0x00,
   0x0f,0xb8,0x4b,0x24,0x05,0x20,0x20,0x20,0x20,0x20,0x4b,0x24,0x01,0x2a,0x22,0x00,
   0x05,0xc5,0x4b,0x81,0x22,0x00,0x0a,0x12,0xfe,0x6a,0x24,0x0e,0x20,0x4f,0x69,0x6c,
   0x20,0x79,0x6f,0x75,0x72,0x20,0x72,0x65,0x65,0x6c,0x22,0x00,0x0f,0xb8,0x4b,0x24,
   0x05,0x20,0x20,0x20,0x20,0x20,0x4b,0x22,0x00,0xef,0xb8,0x22,0x00,0x05,0xc5,0x4b,
   0x81,0x22,0x00,0x0b,0x12,0xfe,0x6a,0x24,0x10,0x53,0x68,0x61,0x72,0x70,0x65,0x6e,
   0x20,0x79,0x6f,0x75,0x20,0x68,0x6f,0x6f,0x6b,0x22,0x00,0x0f,0xb8,0x4b,0x24,0x05,
   0x20,0x20,0x20,0x20,0x20,0x4b,0x22,0x00,0xd2,0xb8,0x22,0x00,0x05,0xc5,0x4b,0x81,
   0x22,0x00,0x0c,0x12,0xfe,0x6a,0x24,0x0e,0x20,0x20,0x48,0x65,0x61,0x74,0x20,0x74,
   0x68,0x65,0x20,0x70,0x61,0x6e,0x22,0x00,0x0f,0xb8,0x4b,0x24,0x05,0x20,0x20,0x20,
   0x20,0x20,0x4b,0x22,0x00,0xdb,0xb8,0x22,0x00,0x05,0xc5,0x4b,0x81,0x0d,0xfe,0x67,
   0x22,0x00,0x63,0x7f,0x00,0xfe,0x67,0x22,0x00,0x0c,0x29,0x00,0xfe,0x67,0x22,0x00,
   0x01,0x27,0x35,0x7e,0x00,0x37,0x07,0xff,0xfc,0x22,0x00,0x05,0x2c,0x7e,0x00,0x1a,
   0x0d,0xfe,0x67,0x22,0x00,0x01,0x86,0xb1,0x07,0xff,0xfc,0x86,0x3e,0x3c,0x22,0x00,
   0x01,0x86,0x3d,0x87,0x7f,0x51,0x00,0x12,0x0d,0xfe,0x67,0x22,0x00,0x05,0x86,0xb1,
   0x07,0xff,0xfc,0x86,0x3e,0x3c,0x87,0x7f,0x51,0xff,0xbb,0x14,0xff,0xfa,0x07,0xff,
   0xfa,0x22,0x00,0x01,0x2d,0x7f,0x07,0xff,0xfa,0x19,0xff,0xf8,0x00,0xfe,0x67,0x05,
   0xfe,0x6a,0x22,0x00,0x10,0xb8,0x4b,0x81,0x7b,0x00,0x00,0x09,0x83,0x43,0x45,0x4e,
   0x54,0x52,0x45,0x24,0x20,0x00,0x02,0x80,0x00,0x33,0x00,0x2f,0x00,0x16,0x00,0x1e,
   0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xea,0x10,0x00,0x00,0x0f,0xff,0xeb,
   0x24,0x01,0x20,0x22,0x00,0x10,0x09,0xff,0xfc,0x96,0x2e,0x86,0x94,0x22,0x00,0x02,
   0x30,0xc5,0x09,0xff,0xfc,0x4b,0x81,0x02,0xff,0xeb,0x79,0x00,0x00,0x09,0x83,0x4d,
   0x41,0x44,0x55,0x44,0x47,0x20,0x20,0x00,0x02,0x80,0x00,0xce,0x00,0xca,0x00,0x16,
   0x00,0xb9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xff,0xec,0x00,0x08,0x22,
   0x00,0x01,0x10,0xff,0xec,0x22,0x00,0x04,0x7f,0x22,0x00,0x02,0x10,0xff,0xec,0x22,
   0x00,0x0e,0x7f,0x22,0x00,0x03,0x10,0xff,0xec,0x22,0x00,0x15,0x7f,0x22,0x00,0x04,
   0x10,0xff,0xec,0x22,0x00,0x04,0x7f,0x22,0x00,0x05,0x10,0xff,0xec,0x22,0x00,0x04,
   0x7f,0x22,0x00,0x06,0x10,0xff,0xec,0x22,0x00,0x04,0x7f,0x22,0x00,0x07,0x10,0xff,
   0xec,0x22,0x00,0x04,0x7f,0x22,0x01,0x80,0x22,0x00,0x40,0x22,0x00,0x06,0x22,0x00,
   0x07,0x34,0x22,0x00,0x08,0x2f,0x2d,0x55,0x0d,0xff,0xea,0x22,0x00,0x01,0x7f,0x22,
   0x01,0x81,0x00,0xff,0xea,0x03,0xff,0xec,0x55,0x0d,0xff,0xea,0x00,0xff,0xea,0x22,
   0x00,0x01,0x2d,0x7f,0x00,0xff,0xea,0x22,0x00,0x08,0x2c,0x7e,0xff,0xe3,0x22,0x01,
   0x80,0x22,0x00,0x40,0x22,0x00,0x07,0x22,0x00,0x07,0x34,0x22,0x00,0x08,0x2f,0x2d,
   0x55,0x0d,0xff,0xea,0x22,0x00,0x07,0x7f,0x22,0x01,0x81,0x00,0xff,0xea,0x03,0xff,
   0xec,0x55,0x0d,0xff,0xea,0x00,0xff,0xea,0x22,0x00,0x01,0x2e,0x7f,0x00,0xff,0xea,
   0x22,0x00,0x00,0x2c,0x7e,0xff,0xe3,0x7b,0x00,0x00,0x09,0x83,0x55,0x54,0x44,0x49,
   0x52,0x20,0x20,0x20,0x00,0x02,0x80,0x00,0xfc,0x00,0xf8,0x00,0x16,0x00,0xe5,0x00,
   0x00,0x00,0x00,0x00,0x00,0x06,0xff,0xf6,0x02,0xff,0xea,0x0a,0x00,0x00,0x53,0x00,
   0x25,0x0d,0xff,0xfa,0x22,0x00,0x00,0x7f,0x0d,0xff,0xfa,0x00,0xff,0xfa,0x22,0x00,
   0x01,0x2d,0x7f,0x00,0xff,0xfa,0x22,0x00,0x03,0x29,0x7e,0x00,0x09,0x0d,0xff,0xfa,
   0x22,0x00,0x01,0x7f,0x0f,0xff,0xf7,0x22,0x00,0x40,0x00,0xff,0xfa,0x2d,0xb8,0x24,
   0x01,0x3a,0x4b,0x81,0x4e,0x4f,0x01,0x24,0x0e,0x20,0x53,0x45,0x45,0x20,0x46,0x49,
   0x4c,0x45,0x53,0x20,0x4f,0x4e,0x20,0x71,0x22,0x00,0x0f,0xb8,0x71,0x24,0x09,0x20,
   0x20,0x20,0x44,0x52,0x49,0x56,0x45,0x20,0x71,0x02,0xff,0xf7,0x71,0x0d,0xff,0xfc,
   0x91,0x7f,0x00,0xff,0xfc,0x22,0x00,0x02,0x2c,0x7e,0x00,0x08,0x51,0xff,0x9b,0x51,
   0x00,0x6d,0x00,0xff,0xfc,0x22,0x00,0x01,0x2c,0x7e,0x00,0x08,0x51,0x00,0x60,0x51,
   0x00,0x5d,0x00,0xff,0xfc,0x22,0x00,0x0d,0x2c,0x7e,0x00,0x50,0x4e,0x0f,0xff,0xeb,
   0x02,0xff,0xf7,0xb7,0x81,0x02,0xff,0xeb,0x71,0x73,0x02,0xff,0xeb,0x24,0x00,0x4a,
   0x7e,0x00,0x1a,0x24,0x0f,0x2a,0x2a,0x45,0x4e,0x44,0x20,0x4f,0x46,0x20,0x50,0x41,
   0x43,0x4b,0x2a,0x2a,0x71,0x73,0x91,0x83,0x51,0x00,0x24,0x0f,0xff,0xf7,0x24,0x00,
   0x81,0x0d,0xff,0xfc,0x91,0x7f,0x00,0xff,0xfc,0x22,0x00,0x01,0x2c,0x02,0xff,0xeb,
   0x24,0x00,0x4a,0x35,0x7e,0xff,0xb8,0x51,0x00,0x05,0x51,0xff,0x49,0x4f,0x00,0x53,
   0x00,0x00,0x7b,0x00,0x00,0x09,0x83,0x55,0x54,0x42,0x59,0x54,0x45,0x20,0x20,0x00,
   0x02,0x80,0x00,0xd0,0x00,0xcc,0x00,0x0a,0x00,0xbc,0x00,0x00,0x00,0x00,0x00,0x00,
   0x03,0xff,0xf6,0x02,0x00,0x00,0x53,0x00,0x25,0x0d,0xff,0xfc,0x22,0x00,0x00,0x7f,
   0x0d,0xff,0xfc,0x00,0xff,0xfc,0x22,0x00,0x01,0x2d,0x7f,0x00,0xff,0xfc,0x22,0x00,
   0x03,0x29,0x7e,0x00,0x09,0x0d,0xff,0xfc,0x22,0x00,0x01,0x7f,0x0f,0xff,0xf7,0x22,
   0x00,0x40,0x00,0xff,0xfc,0x2d,0xb8,0x81,0x4e,0x4f,0x01,0x4e,0x24,0x0e,0x53,0x50,
   0x41,0x43,0x45,0x20,0x4f,0x4e,0x20,0x44,0x52,0x49,0x56,0x45,0x71,0x73,0x02,0xff,
   0xf7,0x71,0x24,0x01,0x3a,0x71,0x0d,0xff,0xfa,0x91,0x7f,0x00,0xff,0xfa,0x22,0x00,
   0x02,0x2c,0x7e,0x00,0x08,0x51,0xff,0xaa,0x51,0x00,0x47,0x00,0xff,0xfa,0x22,0x00,
   0x01,0x2c,0x7e,0x00,0x0b,0x53,0x00,0x00,0x4f,0x00,0x7b,0x51,0x00,0x34,0x00,0xff,
   0xfa,0x22,0x00,0x0d,0x2c,0x7e,0x00,0x2a,0x02,0xff,0xf7,0x24,0x05,0x3a,0x4d,0x41,
   0x49,0x4e,0x4b,0x65,0x01,0x02,0x02,0x54,0x24,0x88,0x22,0x00,0x04,0x22,0x00,0x02,
   0x4c,0x24,0x03,0x20,0x3d,0x20,0x71,0xb6,0x70,0x73,0x0d,0xff,0xfa,0x91,0x7f,0x5c,
   0x00,0xff,0xfa,0x22,0x00,0x01,0x2c,0x7e,0x00,0x06,0x7b,0x51,0x00,0x05,0x51,0xff,
   0x6d,0x7b,0x00,0x00,0x09,0x83,0x55,0x54,0x44,0x45,0x4c,0x20,0x20,0x20,0x00,0x02,
   0x80,0x01,0x3a,0x01,0x36,0x00,0x16,0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x09,
   0xff,0xf0,0x0a,0xff,0xed,0x01,0xff,0xea,0x01,0x00,0x00,0x53,0x01,0x1b,0x4e,0x24,
   0x0f,0x44,0x45,0x4c,0x45,0x54,0x45,0x20,0x41,0x20,0x46,0x49,0x4c,0x45,0x3f,0x3f,
   0x71,0x73,0x24,0x0e,0x43,0x4f,0x4e,0x54,0x49,0x4e,0x55,0x45,0x20,0x28,0x59,0x2f,
   0x4e,0x29,0x71,0x73,0x0f,0xff,0xee,0xbd,0xc7,0x81,0x02,0xff,0xee,0x24,0x01,0x59,
   0x49,0x7e,0x00,0x05,0x51,0x00,0xe2,0x4e,0x24,0x0f,0x45,0x4e,0x54,0x45,0x52,0x20,
   0x46,0x49,0x4c,0x45,0x20,0x4e,0x41,0x4d,0x45,0x71,0x73,0x0f,0xff,0xf1,0x6e,0x4e,
   0x0f,0xff,0xeb,0x02,0xff,0xf1,0x22,0x00,0x01,0xc0,0xc7,0x81,0x02,0xff,0xf1,0x24,
   0x00,0x4a,0x7e,0x00,0x08,0x51,0x00,0xb1,0x51,0x00,0xab,0x02,0xff,0xeb,0x24,0x01,
   0x41,0x45,0x02,0xff,0xeb,0x24,0x01,0x43,0x47,0x35,0x02,0xff,0xf1,0x22,0x00,0x02,
   0x22,0x00,0x01,0xc2,0x24,0x01,0x3a,0x49,0x35,0x7e,0x00,0x1d,0x24,0x0f,0x49,0x4e,
   0x43,0x4f,0x52,0x52,0x45,0x43,0x54,0x20,0x45,0x4e,0x54,0x52,0x59,0x71,0x73,0x91,
   0x83,0x51,0x00,0x75,0x51,0x00,0x6f,0x02,0xff,0xf1,0xa4,0x7e,0x00,0x54,0x4e,0x02,
   0xff,0xf1,0x71,0x22,0x00,0x0f,0xb8,0x71,0x24,0x0e,0x54,0x4f,0x20,0x42,0x45,0x20,
   0x44,0x45,0x4c,0x45,0x54,0x45,0x44,0x3f,0x71,0x73,0x0d,0xff,0xfc,0x91,0x7f,0x00,
   0xff,0xfc,0x22,0x00,0x0d,0x2b,0x7e,0x00,0x05,0x51,0x00,0x3d,0x02,0xff,0xf1,0x5f,
   0x4e,0x02,0xff,0xf1,0x71,0x22,0x00,0x0f,0xb8,0x71,0x24,0x0d,0x20,0x20,0x4e,0x4f,
   0x57,0x20,0x44,0x45,0x4c,0x45,0x54,0x45,0x44,0x71,0x73,0x91,0x83,0x51,0x00,0x16,
   0x24,0x0e,0x46,0x49,0x4c,0x45,0x20,0x4e,0x4f,0x54,0x20,0x46,0x4f,0x55,0x4e,0x44,
   0x71,0x73,0x91,0x83,0x51,0x00,0x02,0x53,0x00,0x00,0x7b,0x00,0x00,0x09,0x83,0x55,
   0x54,0x49,0x4c,0x53,0x20,0x20,0x20,0x00,0x02,0x80,0x00,0xdd,0x00,0xd9,0x00,0x04,
   0x00,0xcc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,0xff,0xfc,0x24,0x20,
   0x43,0x4f,0x4e,0x56,0x45,0x52,0x54,0x2c,0x53,0x50,0x41,0x43,0x45,0x2c,0x46,0x49,
   0x4c,0x45,0x53,0x2c,0x53,0x4f,0x55,0x4e,0x44,0x2c,0x44,0x45,0x4c,0x45,0x54,0x45,
   0x98,0x7f,0x00,0xff,0xfc,0x22,0x00,0x01,0x2c,0x7e,0x00,0x0f,0x20,0x00,0x7d,0x05,
   0x55,0x43,0x4f,0x4e,0x56,0x84,0x51,0x00,0x8c,0x00,0xff,0xfc,0x22,0x00,0x02,0x2c,
   0x7e,0x00,0x10,0x20,0x00,0x7d,0x06,0x55,0x54,0x42,0x59,0x54,0x45,0x84,0x51,0x00,
   0x74,0x00,0xff,0xfc,0x22,0x00,0x03,0x2c,0x7e,0x00,0x0f,0x20,0x00,0x7d,0x05,0x55,
   0x54,0x44,0x49,0x52,0x84,0x51,0x00,0x5d,0x00,0xff,0xfc,0x22,0x00,0x04,0x2c,0x7e,
   0x00,0x11,0x20,0x00,0x7d,0x07,0x55,0x54,0x4e,0x4f,0x49,0x53,0x45,0x84,0x51,0x00,
   0x44,0x00,0xff,0xfc,0x22,0x00,0x05,0x2c,0x7e,0x00,0x39,0x24,0x0e,0x57,0x41,0x52,
   0x4e,0x49,0x4e,0x47,0x20,0x2d,0x20,0x54,0x48,0x49,0x53,0x71,0x22,0x00,0x0f,0xb8,
   0x71,0x24,0x0c,0x45,0x52,0x41,0x53,0x45,0x53,0x20,0x46,0x49,0x4c,0x45,0x53,0x71,
   0x73,0x22,0x00,0x1e,0x54,0x20,0x00,0x7d,0x05,0x55,0x54,0x44,0x45,0x4c,0x84,0x51,
   0x00,0x03,0x7b,0x51,0xff,0x37,0x7b,0x00,0x00,0x09,0x83,0x55,0x43,0x4f,0x4e,0x56,
   0x20,0x20,0x20,0x00,0x02,0x80,0x01,0xbd,0x01,0xb9,0x00,0x2e,0x01,0xa3,0x00,0x00,
   0x00,0x00,0x00,0x00,0x09,0xff,0xf5,0x05,0xff,0xf1,0x02,0xff,0xda,0x05,0x00,0x00,
   0x53,0x00,0x00,0x0d,0xff,0xfc,0x24,0x13,0x4c,0x42,0x53,0x2d,0x4b,0x49,0x4c,0x4f,
   0x53,0x2c,0x4b,0x49,0x4c,0x4f,0x53,0x2d,0x4c,0x42,0x53,0x98,0x7f,0x22,0x00,0x03,
   0x6a,0x00,0xff,0xfc,0x22,0x00,0x01,0x2c,0x7e,0x00,0x08,0x51,0x00,0x16,0x51,0x00,
   0x13,0x00,0xff,0xfc,0x22,0x00,0x02,0x2c,0x7e,0x00,0x08,0x51,0x00,0xcf,0x51,0x00,
   0x03,0x7b,0x53,0x00,0x00,0x53,0xff,0xfc,0x4e,0x24,0x10,0x45,0x4e,0x54,0x45,0x52,
   0x20,0x4c,0x42,0x53,0x3a,0x20,0x20,0x4f,0x5a,0x53,0x3a,0x71,0x73,0x22,0x00,0x07,
   0x22,0x00,0x02,0x4c,0x0f,0xff,0xf6,0x6e,0x22,0x00,0x0d,0x22,0x00,0x02,0x4c,0x0f,
   0xff,0xf2,0x6e,0x02,0xff,0xf6,0x24,0x00,0x4a,0x7e,0x00,0x09,0x0f,0xff,0xf6,0x24,
   0x01,0x30,0x81,0x02,0xff,0xf2,0x24,0x00,0x4a,0x7e,0x00,0x09,0x0f,0xff,0xf2,0x24,
   0x01,0x30,0x81,0x0e,0xff,0xe9,0x02,0xff,0xf6,0xb5,0x80,0x0e,0xff,0xe1,0x02,0xff,
   0xf2,0xb5,0x80,0x0e,0xff,0xe9,0x01,0xff,0xe9,0x01,0xff,0xe1,0x22,0x00,0x10,0x86,
   0x3f,0x3c,0x80,0x0e,0xff,0xd2,0x01,0xff,0xe9,0x23,0x04,0x92,0x35,0x45,0xff,0x3e,
   0x80,0x4e,0x22,0x00,0x01,0x22,0x00,0x01,0x4c,0x24,0x01,0x20,0x71,0x02,0xff,0xf6,
   0x71,0x24,0x06,0x20,0x4c,0x42,0x53,0x3a,0x20,0x71,0x02,0xff,0xf2,0x71,0x24,0x03,
   0x20,0x4f,0x5a,0x71,0x73,0x22,0x00,0x01,0x22,0x00,0x02,0x4c,0x24,0x02,0x3d,0x20,
   0x71,0x01,0xff,0xd2,0x22,0x00,0x02,0x22,0x00,0x07,0xbb,0x71,0x24,0x06,0x20,0x4b,
   0x49,0x4c,0x4f,0x53,0x71,0x73,0x91,0x83,0x51,0xfe,0xf7,0x53,0x00,0x00,0x53,0xff,
   0xfc,0x4e,0x24,0x0c,0x45,0x4e,0x54,0x45,0x52,0x20,0x4b,0x49,0x4c,0x4f,0x53,0x3a,
   0x71,0x73,0x22,0x00,0x07,0x22,0x00,0x02,0x4c,0x0f,0xff,0xdb,0x6e,0x02,0xff,0xdb,
   0x24,0x00,0x4a,0x7e,0x00,0x09,0x0f,0xff,0xdb,0x24,0x01,0x30,0x81,0x0e,0xff,0xe9,
   0x02,0xff,0xdb,0xb5,0x23,0x05,0x30,0x62,0x04,0x22,0x00,0x3e,0x80,0x0e,0xff,0xe1,
   0x01,0xff,0xe9,0x01,0xff,0xe9,0x94,0x86,0x3d,0x80,0x0e,0xff,0xe1,0x01,0xff,0xe1,
   0x22,0x00,0x10,0x86,0x3e,0x80,0x4e,0x24,0x01,0x20,0x71,0x02,0xff,0xdb,0x71,0x24,
   0x06,0x20,0x4b,0x49,0x4c,0x4f,0x53,0x71,0x73,0x24,0x01,0x3d,0x71,0x01,0xff,0xe9,
   0x94,0x6f,0x24,0x06,0x20,0x4c,0x42,0x53,0x3a,0x20,0x71,0x01,0xff,0xe1,0x22,0x00,
   0x00,0x22,0x00,0x02,0xbb,0x71,0x24,0x03,0x20,0x4f,0x5a,0x71,0x73,0x91,0x83,0x51,
   0xfe,0x60,0x7b,0x00,0x00,0x09,0x83,0x55,0x54,0x4e,0x4f,0x49,0x53,0x45,0x20,0x00,
   0x02,0x80,0x00,0x5f,0x00,0x5b,0x00,0x02,0x00,0x4e,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x4e,0x24,0x10,0x20,0x53,0x4f,0x55,0x4e,0x44,0x20,0x53,0x57,0x49,
   0x54,0x43,0x48,0x45,0x44,0x20,0x71,0x22,0x00,0xa4,0x9b,0x22,0x00,0x00,0x2c,0x7e,
   0x00,0x1a,0x22,0x00,0xa4,0x22,0x00,0x01,0x55,0x24,0x0a,0x20,0x20,0x20,0x20,0x20,
   0x20,0x20,0x4f,0x46,0x46,0x71,0x73,0x51,0x00,0x16,0x24,0x09,0x20,0x20,0x20,0x20,
   0x20,0x20,0x20,0x4f,0x4e,0x71,0x73,0x22,0x00,0xa4,0x22,0x00,0x00,0x55,0x91,0x83,
   0x7b,0x00,0x00,0xff,0xff,
  };
#endif

////////////////////////////////////////////////////////////////////////////////
//
typedef struct {
  FATFS fatfs;
  char const *const name;
} fatfs_dscr_t;

static fatfs_dscr_t fatfs_dscrs[2] = {{.name = "0:"}, {.name = "1:"}};
static FATFS *get_fs_by_name(const char *name) {
  for (size_t i = 0; i < count_of(fatfs_dscrs); ++i) {
    if (0 == strcmp(fatfs_dscrs[i].name, name)) {
      return &fatfs_dscrs[i].fatfs;
    }
  }
  return NULL;

}

static bool logger_enabled;
static const uint32_t period = 1000;
static absolute_time_t next_time;

////////////////////////////////////////////////////////////////////////////////



// I2C Port descriptor
typedef struct _I2C_PORT_DESC
{
  unsigned char sdaport;
  unsigned char sdabit;
  unsigned char sclport;
  unsigned char sclbit;
} I2C_PORT_DESC;

// Slave device descriptor
typedef struct _I2C_SLAVE_DESC
{
  I2C_PORT_DESC *port;             // Port the device is on
  unsigned char slave_7bit_addr;        // SLave address
} I2C_SLAVE_DESC;

// I2C functions
void i2c_release(I2C_PORT_DESC *port);
void i2c_delay(I2C_PORT_DESC *port);
void i2c_sda_low(I2C_PORT_DESC *port);
void i2c_sda_high(I2C_PORT_DESC *port);
void i2c_scl_low(I2C_PORT_DESC *port);
void i2c_scl_high(I2C_PORT_DESC *port);
void i2c_start(I2C_PORT_DESC *port);
void i2c_stop(I2C_PORT_DESC *port);
int i2c_send_byte(I2C_PORT_DESC *port, BYTE b);
int i2c_read_bytes(I2C_SLAVE_DESC *slave, int n, BYTE *data);
void i2c_send_bytes(I2C_SLAVE_DESC *slave, int n, BYTE *data);
#

#endif /* I2C_FUNCTIONS_H_ */


/*
 * i2c_functions.c
 *
 *  Created on: 23 Jul 2016
 *      Author: menadue
 */
//#include "chip.h"
//#include "board.h"
//#include "i2c_functions.h"


// I2C functions

// Release the bus
void i2c_release(I2C_PORT_DESC *port) {
  // All inputs
  gpio_set_dir(SDA_PIN,GPIO_IN);
  gpio_set_dir(SCL_PIN,GPIO_IN);
  //  Chip_GPIO_SetPinDIRInput(LPC_GPIO, port->sdaport, port->sdabit);
  //Chip_GPIO_SetPinDIRInput(LPC_GPIO, port->sclport, port->sclbit);
}

// Delay to slow down to I2C bus rates
void i2c_delay(I2C_PORT_DESC *port) {
  sleep_us(10);
  return;
  volatile int i;
  for(i=0; i<1; i++)
    {
    }
  
}

void i2c_sda_low(I2C_PORT_DESC *port) {
  // Take SCL low by driving a 0 on to the bus
  gpio_put(SDA_PIN, 0);
  gpio_set_dir(SDA_PIN,GPIO_OUT);
  //Chip_GPIO_SetPinState(LPC_GPIO, port->sdaport, port->sdabit, 0);
  
  // Make sure bit is an output
  //Chip_GPIO_SetPinDIROutput(LPC_GPIO, port->sdaport, port->sdabit);
}

void i2c_sda_high(I2C_PORT_DESC *port) {
  // Make sure bit is an intput
  gpio_set_dir(SDA_PIN,GPIO_IN);

  //  Chip_GPIO_SetPinDIRInput(LPC_GPIO, port->sdaport, port->sdabit);
}

void i2c_scl_low(I2C_PORT_DESC *port) {

  gpio_put(SCL_PIN, 0);
  gpio_set_dir(SCL_PIN,GPIO_OUT);

  //  Chip_GPIO_SetPinState(LPC_GPIO, port->sclport, port->sclbit, 0);

  // Make sure bit is an output
  //Chip_GPIO_SetPinDIROutput(LPC_GPIO, port->sclport, port->sclbit);
}

void i2c_scl_high(I2C_PORT_DESC *port)
{
  // Make sure bit is an input
  gpio_set_dir(SCL_PIN,GPIO_IN);
  //Chip_GPIO_SetPinDIRInput(LPC_GPIO, port->sclport, port->sclbit);
}

// Read ACK bit

int i2c_read_sda(I2C_PORT_DESC *port)
{
  return(gpio_get(SDA_PIN));
  //  return(Chip_GPIO_GetPinState(LPC_GPIO, port->sdaport, port->sdabit));

  //  return( ((*(port->port)) & (port->sda_mask)) == port->sda_mask);
}

// I2C start condition

void i2c_start(I2C_PORT_DESC *port)
{
  //
  i2c_sda_low(port);

  i2c_delay(port);
  i2c_scl_low(port);
  i2c_delay(port);
}

void i2c_stop(I2C_PORT_DESC *port)
{
  i2c_scl_high(port);
  i2c_delay(port);
  i2c_sda_high(port);
  i2c_delay(port);

}

// Send 8 bits and read ACK
// Returns number of acks received

int i2c_send_byte(I2C_PORT_DESC *port, BYTE b)
{
  int i;
  int ack=0;
  int retries = 100;
  int rc =1;

  for (i = 0; i < 8; i++)
    {
      // Set up data
      if ((b & 0x80) == 0x80)
	{
	  i2c_sda_high(port);
	} else
	{
	  i2c_sda_low(port);
	}

      // Delay
      i2c_delay(port);

      // Take clock high and then low
      i2c_scl_high(port);

      // Delay
      i2c_delay(port);

      // clock low again
      i2c_scl_low(port);

      // Delay
      i2c_delay(port);

      // Shift next data bit in
      b <<= 1;
    }

  // release data line
  i2c_sda_high(port);

  // Now get ACK
  i2c_scl_high(port);

  i2c_delay(port);

  // read ACK

  while( ack = i2c_read_sda(port) ) // @suppress("Assignment in condition")
    {
      retries--;

      if ( retries == 0 )
	{
	  rc = 0;
	  break;
	}
    }

  i2c_scl_low(port);

  i2c_delay(port);
  return (rc);
}


// Receive 8 bits and set ACK
// Ack as specified
void i2c_recv_byte(I2C_PORT_DESC *port, BYTE *data, int ack)
{
  int i, b;

  b = 0;

  // Make data an input
  i2c_sda_high(port);

  for (i = 0; i < 8; i++)
    {
      // Delay
      i2c_delay(port);

      // Take clock high and then low
      i2c_scl_high(port);

      // Delay
      i2c_delay(port);

      // Shift next data bit in
      b <<= 1;
      b += (i2c_read_sda(port) & 0x1);

      // clock low again
      i2c_scl_low(port);

      // Delay
      i2c_delay(port);

    }

  // ACK is as we are told 
  if ( ack )
    {
      // Data low for ACK
      i2c_sda_low(port);
    }
  else
    {
      i2c_sda_high(port);
    }

  // Now send ACK
  i2c_scl_high(port);

  i2c_delay(port);

  i2c_scl_low(port);

  i2c_delay(port);

  *data = b;

}

// Reads a block of bytes from a slave

int i2c_read_bytes(I2C_SLAVE_DESC *slave, int n, BYTE *data)
{
  int i;
  BYTE byte;

  i2c_start(slave->port);

  // Send slave address with read bit
  if ( !i2c_send_byte(slave->port, ((slave->slave_7bit_addr) << 1) | 1) )
    {
      i2c_stop(slave->port);
      return(0);
    }


  //
  for (i = 0; i < n; i++)
    {
      i2c_recv_byte(slave->port, &byte, (i==(n-1))? 0 : 1);
      *(data++) = byte;
    }

  i2c_stop(slave->port);

  return(1);
}

// Sends a block of data to I2C slave
void i2c_send_bytes(I2C_SLAVE_DESC *slave, int n, BYTE *data)
{
  int i;

  i2c_start(slave->port);

  // Send slave address with read bit
  i2c_send_byte(slave->port, ((slave->slave_7bit_addr) << 1) | 0);

  //
  for (i = 0; i < n; i++)
    {
      i2c_send_byte(slave->port, *(data++));
    }

  i2c_stop(slave->port);
}

void i2c_init(I2C_PORT_DESC *port)
{
  gpio_init(SDA_PIN);
  gpio_init(SCL_PIN);
  //Chip_GPIO_SetPinDIROutput(LPC_GPIO, 0, 19);
  //Chip_GPIO_SetPinDIROutput(LPC_GPIO, 0, 2);
  //Chip_GPIO_SetPinDIROutput(LPC_GPIO, 0, 18);
  //Chip_GPIO_SetPinDIROutput(LPC_GPIO, 0, 7);
  //Chip_GPIO_SetPinDIROutput(LPC_GPIO, 1, 19);
  //Chip_GPIO_SetPinDIROutput(LPC_GPIO, 1, 20);
}

/*
 * oled096.h
 *
 *  Created on: 23 Jul 2016
 *      Author: menadue
 */

#ifndef OLED096_H_
#define OLED096_H_

#define I2C_CMD       1
#define I2C_DATA      0
#define I2C_REPEAT    1
#define I2C_NO_REPEAT 0

void oled_send_cmd(I2C_SLAVE_DESC *slave, int n, unsigned char *data, int command, int repeat);
void oled_set_xy(I2C_SLAVE_DESC *slave, int x, int y);
void oled_set_pixel_xy(I2C_SLAVE_DESC *slave, int x, int y);
void oled_set_byte_xy(I2C_SLAVE_DESC *slave, int x, int y, int b);
void oled_gap(I2C_SLAVE_DESC *slave);
void oled_display_int(I2C_SLAVE_DESC *slave, long int n, int num_digits);
void oled_display_string(I2C_SLAVE_DESC *slave, char *string);
void oled_clear_display(I2C_SLAVE_DESC *slave);

void oled_setup(I2C_SLAVE_DESC *slave);
void oled_display_scaled_string_xy(I2C_SLAVE_DESC *slave, char *string, int x, int y, int scale);

extern const unsigned char font_5x7_letters[];

#endif /* OLED096_H_ */

/*
 * oled096.c
 *
 *  Created on: 23 Jul 2016
 *      Author: menadue
 */

//
// 0.96" OLED display functions
//


// Sends a block of commands to the SSD1306
// command causes 80 to be sent before each byte
// command = 0 causes 0x40 and just data bytes
// Repeat = 1, repeat data byte 0

//#include <string.h>
//#include "i2c_functions.h"
//#include "oled096.h"

void oled_send_cmd(I2C_SLAVE_DESC *slave, int n, unsigned char *data, int command, int repeat)
{
  int i;

  i2c_start(slave->port);

  // Send slave address
  i2c_send_byte(slave->port, (slave->slave_7bit_addr)<<1);

  if ( !command )
    {
      i2c_send_byte(slave->port, 0x40);
    }

  // Send the command bytes, each preceded bu 0x80 (continuation)
  for (i = 0; i < n; i++) {
    if ( command )
      {
        i2c_send_byte(slave->port, 0x80);
      }
    i2c_send_byte(slave->port, *data);

    if ( !repeat )
      {
	data++;
      }
  }

  i2c_stop(slave->port);
}

//--------------------------------------------------------------------------------
// OLED display functions
//

const unsigned char init_seq[] = {
				  0xae,                       // ???
				  0xd5, 0x80,

				  0xa8,0x3f,

				  0xd3,0x00,
				  0x8d,0x14,0x40,0xa6,0xa4,0xa1,0xc8,0xda,0x12,0x81,0x8f,
				  0xd9,         //??

				  0xf1,0xdb,0x40,0xaf,
};

// From data sheet
const unsigned char init_seq2[] = {
				   //  0xae,          // Display Off
				   0xa8,0x3f,       // MUX ratio works for now
				   0xd3,0x00,       // Set display offset 0
				   0x40,            // Set display start Line
				   0x8d,0x14,       // Charge pump ON, needed or blank display
				   0xa1,            // Seg remap 180 rotate
				   0xc8,            // Inverted COM scan
				   0xda, 0x12,      // COM config: A5:Disable left/right remap, A4:Alternate COM pin config
				   0x81,0x2f,      // Contrast value
				   0xd9, 0xf1,     // Precharge, quite important
				   0xdb, 0x40,     // Set Vcomh level, leave it out and inverted display.

				   0xa6,            // Normal display (not inverted)
				   0xd5,0x80,       // Set display oscillator

				   0x20, 0x02,        // Page addressing mode
				   0x21,0x00,0x7f,               // Set display RAM start and end address
				   // seems to have effect in page addressing mode.
				   0x22,0x00,0x07,               // Set display page address

				   0xa4,
				   0xaf,             // Display ON
};

const unsigned char display_setup_seq[] = {
					   0x21,0x00,0x7f,               // Set display RAM start and end address
					   0x22,0x00,0x3f,               // Set display page address
};


const unsigned char display_text_seq[] = {
					  0x7e,0x11,0x11,0x11,0x7e,0x00,0x7f,0x49,0x49,0x49,0x36,0x00,0x00,0x3e,0x41,0x41,0x41,0x22,0x00,0x7f,0x41,0x41,0x41,0x22,0x1c,0x00,0x7f,0x49,0x49,0x49,0x41,0x00,
};

// Set XY to given position
// We attempt to position to the byte that holds the pixel (x,y)
// Page addressing mode

void oled_set_xy(I2C_SLAVE_DESC *slave, int x, int y)
{
  unsigned char seq[3];

  x = x % 128;
  y = y % 64;
  seq[0] = 0xB0+y/8;      // Set page
  seq[1] = 0x00+x%16;     // Set low part of start address
  seq[2] = 0x10+x/16;     // Set high part

  oled_send_cmd(slave, sizeof(seq), &seq, I2C_CMD, I2C_NO_REPEAT);
}

unsigned char byteval;

// Writes bit pattern at x,y
void oled_set_pixel_xy(I2C_SLAVE_DESC *slave, int x, int y)

{
  byteval = 1<< (y % 8);

  oled_set_xy(slave->port, x, y);
  oled_send_cmd(slave, 1, &byteval, I2C_DATA, I2C_NO_REPEAT);
}

void oled_set_byte_xy(I2C_SLAVE_DESC *slave, int x, int y, int b)
{
  byteval = b;

  oled_set_xy(slave, x, y);
  oled_send_cmd(slave, 1, &byteval, I2C_DATA, I2C_NO_REPEAT);
}


// Font

const unsigned char font_5x7_letters[] = {
					  0x00, 0x00, 0x00, 0x00, 0x00,// (space)
					  0x00, 0x00, 0x5F, 0x00, 0x00,// !
					  0x00, 0x07, 0x00, 0x07, 0x00,// "
					  0x14, 0x7F, 0x14, 0x7F, 0x14,// #
					  0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
					  0x23, 0x13, 0x08, 0x64, 0x62,// %
					  0x36, 0x49, 0x55, 0x22, 0x50,// &
					  0x00, 0x05, 0x03, 0x00, 0x00,// '
					  0x00, 0x1C, 0x22, 0x41, 0x00,// (
					  0x00, 0x41, 0x22, 0x1C, 0x00,// )
					  0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
					  0x08, 0x08, 0x3E, 0x08, 0x08,// +
					  0x00, 0x50, 0x30, 0x00, 0x00,// ,
					  0x08, 0x08, 0x08, 0x08, 0x08,// -
					  0x00, 0x60, 0x60, 0x00, 0x00,// .
					  0x20, 0x10, 0x08, 0x04, 0x02,// /
					  0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
					  0x00, 0x42, 0x7F, 0x40, 0x00,// 1
					  0x42, 0x61, 0x51, 0x49, 0x46,// 2
					  0x21, 0x41, 0x45, 0x4B, 0x31,// 3
					  0x18, 0x14, 0x12, 0x7F, 0x10,// 4
					  0x27, 0x45, 0x45, 0x45, 0x39,// 5
					  0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
					  0x01, 0x71, 0x09, 0x05, 0x03,// 7
					  0x36, 0x49, 0x49, 0x49, 0x36,// 8
					  0x06, 0x49, 0x49, 0x29, 0x1E,// 9
					  0x00, 0x36, 0x36, 0x00, 0x00,// :
					  0x00, 0x56, 0x36, 0x00, 0x00,// ;
					  0x00, 0x08, 0x14, 0x22, 0x41,// <
					  0x14, 0x14, 0x14, 0x14, 0x14,// =
					  0x41, 0x22, 0x14, 0x08, 0x00,// >
					  0x02, 0x01, 0x51, 0x09, 0x06,// ?
					  0x32, 0x49, 0x79, 0x41, 0x3E,// @
					  0x7E, 0x11, 0x11, 0x11, 0x7E,// A
					  0x7F, 0x49, 0x49, 0x49, 0x36,// B
					  0x3E, 0x41, 0x41, 0x41, 0x22,// C
					  0x7F, 0x41, 0x41, 0x22, 0x1C,// D
					  0x7F, 0x49, 0x49, 0x49, 0x41,// E
					  0x7F, 0x09, 0x09, 0x01, 0x01,// F
					  0x3E, 0x41, 0x41, 0x51, 0x32,// G
					  0x7F, 0x08, 0x08, 0x08, 0x7F,// H
					  0x00, 0x41, 0x7F, 0x41, 0x00,// I
					  0x20, 0x40, 0x41, 0x3F, 0x01,// J
					  0x7F, 0x08, 0x14, 0x22, 0x41,// K
					  0x7F, 0x40, 0x40, 0x40, 0x40,// L
					  0x7F, 0x02, 0x04, 0x02, 0x7F,// M
					  0x7F, 0x04, 0x08, 0x10, 0x7F,// N
					  0x3E, 0x41, 0x41, 0x41, 0x3E,// O
					  0x7F, 0x09, 0x09, 0x09, 0x06,// P
					  0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
					  0x7F, 0x09, 0x19, 0x29, 0x46,// R
					  0x46, 0x49, 0x49, 0x49, 0x31,// S
					  0x01, 0x01, 0x7F, 0x01, 0x01,// T
					  0x3F, 0x40, 0x40, 0x40, 0x3F,// U
					  0x1F, 0x20, 0x40, 0x20, 0x1F,// V
					  0x7F, 0x20, 0x18, 0x20, 0x7F,// W
					  0x63, 0x14, 0x08, 0x14, 0x63,// X
					  0x03, 0x04, 0x78, 0x04, 0x03,// Y
					  0x61, 0x51, 0x49, 0x45, 0x43,// Z
					  0x00, 0x00, 0x7F, 0x41, 0x41,// [
					  0x02, 0x04, 0x08, 0x10, 0x20,// "\"
					  0x41, 0x41, 0x7F, 0x00, 0x00,// ]
					  0x04, 0x02, 0x01, 0x02, 0x04,// ^
					  0x40, 0x40, 0x40, 0x40, 0x40,// _
					  0x00, 0x01, 0x02, 0x04, 0x00,// `
					  0x20, 0x54, 0x54, 0x54, 0x78,// a
					  0x7F, 0x48, 0x44, 0x44, 0x38,// b
					  0x38, 0x44, 0x44, 0x44, 0x20,// c
					  0x38, 0x44, 0x44, 0x48, 0x7F,// d
					  0x38, 0x54, 0x54, 0x54, 0x18,// e
					  0x08, 0x7E, 0x09, 0x01, 0x02,// f
					  0x08, 0x14, 0x54, 0x54, 0x3C,// g
					  0x7F, 0x08, 0x04, 0x04, 0x78,// h
					  0x00, 0x44, 0x7D, 0x40, 0x00,// i
					  0x20, 0x40, 0x44, 0x3D, 0x00,// j
					  0x00, 0x7F, 0x10, 0x28, 0x44,// k
					  0x00, 0x41, 0x7F, 0x40, 0x00,// l
					  0x7C, 0x04, 0x18, 0x04, 0x78,// m
					  0x7C, 0x08, 0x04, 0x04, 0x78,// n
					  0x38, 0x44, 0x44, 0x44, 0x38,// o
					  0x7C, 0x14, 0x14, 0x14, 0x08,// p
					  0x08, 0x14, 0x14, 0x18, 0x7C,// q
					  0x7C, 0x08, 0x04, 0x04, 0x08,// r
					  0x48, 0x54, 0x54, 0x54, 0x20,// s
					  0x04, 0x3F, 0x44, 0x40, 0x20,// t
					  0x3C, 0x40, 0x40, 0x20, 0x7C,// u
					  0x1C, 0x20, 0x40, 0x20, 0x1C,// v
					  0x3C, 0x40, 0x30, 0x40, 0x3C,// w
					  0x44, 0x28, 0x10, 0x28, 0x44,// x
					  0x0C, 0x50, 0x50, 0x50, 0x3C,// y
					  0x44, 0x64, 0x54, 0x4C, 0x44,// z
					  0x00, 0x08, 0x36, 0x41, 0x00,// {
					  0x00, 0x00, 0x7F, 0x00, 0x00,// |
					  0x00, 0x41, 0x36, 0x08, 0x00,// }
					  0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
					  0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
};

// Turn display off
const unsigned char off_seq = {
			       0xae
};

// Turn display on
const unsigned char on_seq = {
			      0xaf
};


// Prints a character gap
void oled_gap(I2C_SLAVE_DESC *slave)
{
  unsigned char zero = 0;

  oled_send_cmd(slave, 1, &zero, I2C_DATA, I2C_NO_REPEAT);
}

// Displays an integer in decimal, number of digits displayed is specified, MS digits dropped

void oled_display_int(I2C_SLAVE_DESC *slave, long int n, int num_digits)
{
  int i;
  int dig;
  int mul = 10000;

  if( n < 0 )
    {
      oled_display_string(slave, "-");
      n = -n;
    }
  else
    {
      oled_display_string(slave, " ");
    }

  for(i=5; i>0; i--)
    {
      dig = n / mul;
      n = n % mul;
      mul /=10;

      // Display digit
      if ( i <= num_digits )
	{
	  oled_send_cmd(slave, 5, font_5x7_letters+('0'-' ')*5+dig*5, I2C_DATA, I2C_NO_REPEAT);
	  oled_gap(slave);
	}
    }
}

void oled_display_string(I2C_SLAVE_DESC *slave, char *string)
{
  int j;
  int len = strlen(string);

  for(j=0; j<len; j++)
    {
      oled_send_cmd(slave, 5, font_5x7_letters+((*string++) - ' ')*5, I2C_DATA, I2C_NO_REPEAT);
      oled_gap(slave);
    }
}


void oled_clear_display(I2C_SLAVE_DESC *slave)
{
  int y;
  unsigned char zero = 0;

  for(y=0; y<64; y+=8)
    {
      oled_set_xy(slave, 0, y);
      oled_send_cmd(slave, 128, &zero, I2C_DATA, I2C_REPEAT);
    }

}

//
// Displays a string with pixel scaling
//
unsigned char scaled_line[100];

void oled_display_scaled_string_xy(I2C_SLAVE_DESC *slave, char *string, int x, int y, int scale)
{
  unsigned char i;
  int  j, k, s;
  int scale_i;
  int len = strlen(string);
  int b;

  // We now display the string a character at a time, each character being scaled
  scale_i = 0;

  for(k=0; k<len; k++)
    {
      // Scale character
      // We start with 5 bytes, each of 8 bits, these are vertical slices of the bit pattern
      // We need to stretch the character vertically by scale

      for(i=0; i<5; i++)
	{
	  // For each byte we build a new bitmap that is scaled
	  for(j=0; j<8; j++)
	    {
	      // Get next bit
	      b  = (*(font_5x7_letters+((*string)-' ')*5+i));
	      b &= (1 << (7-j));
	      b >>= (7-j);

	      // Shift more bits in to scaled data
	      for(s=0; s<scale;s++)
		{
		  scaled_line[scale_i/8] <<= 1;
		  scaled_line[scale_i/8] |= b;
		  scale_i++;
		}
	    }
#if 0
	  // Move to next byte
	  while( (scale_i % 8) != 0 )
	    {
	      scale_i++;
	    }
#endif
	}

      // Put a gap between chars
      for(s=0; s<scale;s++)
	{
	  scaled_line[scale_i/8] = 0;
	  scale_i+=8;
	}

      string++;
    }

  // Send scaled data to display
  for(j=0; j < scale; j++)
    {
      oled_set_xy(slave, x, y+8*((scale-1)-j));
      for(i=0; i<5*len*scale; i+=scale)
	{
	  for(s=0; s<scale;s++)
	    {
	      oled_send_cmd(slave, 1, &(scaled_line[i+j]), I2C_DATA, I2C_NO_REPEAT);
	    }
	}
      oled_gap(slave);
    }

#if 0
  oled_set_xy(slave->port, 0,0);
  for(j=0;j<scale_i/8;j++)
    {
      oled_send_cmd(slave, 1, &(scaled_line[j]), I2C_DATA, I2C_NO_REPEAT);
    }


  oled_set_xy(slave, 30, 24);
  oled_display_int(slave, scale_i,5);
  oled_set_xy(slave, 30, 32);
  oled_display_int(slave, len,5);
#endif
}

void oled_setup(I2C_SLAVE_DESC *slave)
{
  int i;

  // Release bus
  i2c_release(slave->port);

  // Delay to allow things to start up.
  for(i=0; i<10000; i++)
    {
    }

  // Then clear any glitched I2C commands with a start and stop
  i2c_start(slave->port);
  i2c_stop(slave->port);

  // Initialise display
  oled_send_cmd(slave, sizeof(init_seq2), &init_seq2, 1, 0);

  // Clear display
  oled_clear_display(slave);


}
I2C_PORT_DESC i2c_bus_0 =
  {
   0, 18,
   0, 7,
  };

// Dummy structure
I2C_SLAVE_DESC oled0 =
  {
   &i2c_bus_0,
   0x78 >>1,
  };

static void run_setrtc() {
  const char *dateStr = strtok(NULL, " ");
  if (!dateStr) {
    printf("Missing argument\n");
    return;
  }
  int date = atoi(dateStr);

  const char *monthStr = strtok(NULL, " ");
  if (!monthStr) {
    printf("Missing argument\n");
    return;
  }
  int month = atoi(monthStr);

  const char *yearStr = strtok(NULL, " ");
  if (!yearStr) {
    printf("Missing argument\n");
    return;
  }
  int year = atoi(yearStr) + 2000;

  const char *hourStr = strtok(NULL, " ");
  if (!hourStr) {
    printf("Missing argument\n");
    return;
  }
  int hour = atoi(hourStr);

  const char *minStr = strtok(NULL, " ");
  if (!minStr) {
    printf("Missing argument\n");
    return;
  };
  int min = atoi(minStr);

  const char *secStr = strtok(NULL, " ");
  if (!secStr) {
    printf("Missing argument\n");
    return;
  }
  int sec = atoi(secStr);

  datetime_t t = {.year = year,
		  .month = month,
		  .day = date,
		  .dotw = 0,  // 0 is Sunday, so 5 is Friday
		  .hour = hour,
		  .min = min,
		  .sec = sec};
  // bool r = rtc_set_datetime(&t);
  setrtc(&t);
}
static void run_lliot() {
  size_t pnum = 0;
  char *arg1 = strtok(NULL, " ");
  if (arg1) {
    pnum = strtoul(arg1, NULL, 0);
  }
  //lliot(pnum);
}
static void run_date() {
  char buf[128] = {0};
  time_t epoch_secs = time(NULL);
  struct tm *ptm = localtime(&epoch_secs);
  size_t n = strftime(buf, sizeof(buf), "%c", ptm);
  myASSERT(n);
  printf("%s\n", buf);
  strftime(buf, sizeof(buf), "%j",
	   ptm);  // The day of the year as a decimal number (range
  // 001 to 366).
  printf("Day of year: %s\n", buf);
}
static void run_format() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) {
    printf("Missing argument\n");
    return;
  }
  FATFS *p_fs = get_fs_by_name(arg1);
  if (!p_fs) {
    printf("Unknown logical drive number: \"%s\"\n", arg1);
    return;
  }
  /* Format the drive with default parameters */
  FRESULT fr = f_mkfs(arg1, 0, 0, FF_MAX_SS * 2);
  if (FR_OK != fr) printf("f_mkfs error: %s (%d)\n", FRESULT_str(fr), fr);
}
static void run_mount() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) arg1 = "0:";
  FATFS *p_fs = get_fs_by_name(arg1);
  if (!p_fs) {
    printf("Unknown logical drive number: \"%s\"\n", arg1);
    return;
  }
  FRESULT fr = f_mount(p_fs, arg1, 1);
  if (FR_OK != fr) printf("f_mount error: %s (%d)\n", FRESULT_str(fr), fr);
}
static void run_unmount() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) arg1 = "";
  FRESULT fr = f_unmount(arg1);
  if (FR_OK != fr) printf("f_mount error: %s (%d)\n", FRESULT_str(fr), fr);
}
static void run_chdrive() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) arg1 = "0:";
  FRESULT fr = f_chdrive(arg1);
  if (FR_OK != fr) printf("f_mount error: %s (%d)\n", FRESULT_str(fr), fr);
}
static void run_getfree() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) arg1 = "0:";
  DWORD fre_clust, fre_sect, tot_sect;
  /* Get volume information and free clusters of drive */
  FATFS *p_fs = get_fs_by_name(arg1);
  if (!p_fs) {
    printf("Unknown logical drive number: \"%s\"\n", arg1);
    return;
  }
  FRESULT fr = f_getfree(arg1, &fre_clust, &p_fs);
  if (FR_OK != fr) {
    printf("f_getfree error: %s (%d)\n", FRESULT_str(fr), fr);
    return;
  }
  /* Get total sectors and free sectors */
  tot_sect = (p_fs->n_fatent - 2) * p_fs->csize;
  fre_sect = fre_clust * p_fs->csize;
  /* Print the free space (assuming 512 bytes/sector) */
  printf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2,
	 fre_sect / 2);
}
static void run_cd() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) {
    printf("Missing argument\n");
    return;
  }
  FRESULT fr = f_chdir(arg1);
  if (FR_OK != fr) printf("f_mkfs error: %s (%d)\n", FRESULT_str(fr), fr);
}
static void run_mkdir() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) {
    printf("Missing argument\n");
    return;
  }
  FRESULT fr = f_mkdir(arg1);
  if (FR_OK != fr) printf("f_mkfs error: %s (%d)\n", FRESULT_str(fr), fr);
}
void ls(const char *dir) {
  char cwdbuf[FF_LFN_BUF] = {0};
  FRESULT fr; /* Return value */
  char const *p_dir;
  if (dir[0]) {
    p_dir = dir;
  } else {
    fr = f_getcwd(cwdbuf, sizeof cwdbuf);
    if (FR_OK != fr) {
      printf("f_getcwd error: %s (%d)\n", FRESULT_str(fr), fr);
      return;
    }
    p_dir = cwdbuf;
  }
  printf("Directory Listing: %s\n", p_dir);
  DIR dj;      /* Directory object */
  FILINFO fno; /* File information */
  memset(&dj, 0, sizeof dj);
  memset(&fno, 0, sizeof fno);
  fr = f_findfirst(&dj, &fno, p_dir, "*");
  if (FR_OK != fr) {
    printf("f_findfirst error: %s (%d)\n", FRESULT_str(fr), fr);
    return;
  }
  while (fr == FR_OK && fno.fname[0]) { /* Repeat while an item is found */
    /* Create a string that includes the file name, the file size and the
       attributes string. */
    const char *pcWritableFile = "writable file",
      *pcReadOnlyFile = "read only file",
      *pcDirectory = "directory";
    const char *pcAttrib;
    /* Point pcAttrib to a string that describes the file. */
    if (fno.fattrib & AM_DIR) {
      pcAttrib = pcDirectory;
    } else if (fno.fattrib & AM_RDO) {
      pcAttrib = pcReadOnlyFile;
    } else {
      pcAttrib = pcWritableFile;
    }
    /* Create a string that includes the file name, the file size and the
       attributes string. */
    printf("%s [%s] [size=%llu]\n", fno.fname, pcAttrib, fno.fsize);

    fr = f_findnext(&dj, &fno); /* Search for next item */
  }
  f_closedir(&dj);
}
static void run_ls() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) arg1 = "";
  ls(arg1);
}
static void run_cat() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) {
    printf("Missing argument\n");
    return;
  }
  FIL fil;
  FRESULT fr = f_open(&fil, arg1, FA_READ);
  if (FR_OK != fr) {
    printf("f_open error: %s (%d)\n", FRESULT_str(fr), fr);
    return;
  }
  char buf[256];
  while (f_gets(buf, sizeof buf, &fil)) {
    printf("%s", buf);
  }
  fr = f_close(&fil);
  if (FR_OK != fr) printf("f_open error: %s (%d)\n", FRESULT_str(fr), fr);
}
static void run_big_file_test() {
  const char *pcPathName = strtok(NULL, " ");
  if (!pcPathName) {
    printf("Missing argument\n");
    return;
  }
  const char *pcSize = strtok(NULL, " ");
  if (!pcSize) {
    printf("Missing argument\n");
    return;
  }
  size_t size = strtoul(pcSize, 0, 0);
  const char *pcSeed = strtok(NULL, " ");
  if (!pcSeed) {
    printf("Missing argument\n");
    return;
  }
  uint32_t seed = atoi(pcSeed);
  //big_file_test(pcPathName, size, seed);
}
static void del_node(const char *path) {
  FILINFO fno;
  char buff[256];
  /* Directory to be deleted */
  strlcpy(buff, path, sizeof(buff));
  /* Delete the directory */
  FRESULT fr = delete_node(buff, sizeof buff / sizeof buff[0], &fno);
  /* Check the result */
  if (fr) {
    printf("Failed to delete the directory %s. ", path);
    printf("%s error: %s (%d)\n", __func__, FRESULT_str(fr), fr);
  }
}
static void run_del_node() {
  char *arg1 = strtok(NULL, " ");
  if (!arg1) {
    printf("Missing argument\n");
    return;
  }
  del_node(arg1);
}
static void run_cdef() {
  f_mkdir("/cdef");  // fake mountpoint
  //vCreateAndVerifyExampleFiles("/cdef");
}
static void run_swcwdt() { /*vStdioWithCWDTest("/cdef");*/ }
static void run_loop_swcwdt() {
  int cRxedChar = 0;
  do {
    del_node("/cdef");
    run_cdef();
    run_swcwdt();
    cRxedChar = getchar_timeout_us(0);
  } while (PICO_ERROR_TIMEOUT == cRxedChar);
}
static void run_start_logger() {
  logger_enabled = true;
  next_time = delayed_by_ms(get_absolute_time(), period);
}
static void run_stop_logger() { logger_enabled = false; }
static void run_help();

typedef void (*p_fn_t)();
typedef struct {
  char const *const command;
  p_fn_t const function;
  char const *const help;
} cmd_def_t;

static cmd_def_t cmds[] = {
			   {"setrtc", run_setrtc,
			    "setrtc <DD> <MM> <YY> <hh> <mm> <ss>:\n"
			    "  Set Real Time Clock\n"
			    "  Parameters: new date (DD MM YY) new time in 24-hour format "
			    "(hh mm ss)\n"
			    "\te.g.:setrtc 16 3 21 0 4 0"},
			   {"date", run_date, "date:\n Print current date and time"},
			   {"lliot", run_lliot,
			    "lliot <drive#>:\n !DESTRUCTIVE! Low Level I/O Driver Test\n"
			    "\te.g.: lliot 1"},
			   {"format", run_format,
			    "format [<drive#:>]:\n"
			    "  Creates an FAT/exFAT volume on the logical drive.\n"
			    "\te.g.: format 0:"},
			   {"mount", run_mount,
			    "mount [<drive#:>]:\n"
			    "  Register the work area of the volume\n"
			    "\te.g.: mount 0:"},
			   {"unmount", run_unmount,
			    "unmount <drive#:>:\n"
			    "  Unregister the work area of the volume"},
			   {"chdrive", run_chdrive,
			    "chdrive <drive#:>:\n"
			    "  Changes the current directory of the logical drive.\n"
			    "  <path> Specifies the directory to be set as current directory.\n"
			    "\te.g.: chdrive 1:"},
			   {"getfree", run_getfree,
			    "getfree [<drive#:>]:\n"
			    "  Print the free space on drive"},
			   {"cd", run_cd,
			    "cd <path>:\n"
			    "  Changes the current directory of the logical drive.\n"
			    "  <path> Specifies the directory to be set as current directory.\n"
			    "\te.g.: cd /dir1"},
			   {"mkdir", run_mkdir,
			    "mkdir <path>:\n"
			    "  Make a new directory.\n"
			    "  <path> Specifies the name of the directory to be created.\n"
			    "\te.g.: mkdir /dir1"},
			   {"del_node", run_del_node,
			    "del_node <path>:\n"
			    "  Remove directory and all of its contents.\n"
			    "  <path> Specifies the name of the directory to be deleted.\n"
			    "\te.g.: del_node /dir1"},
			   {"ls", run_ls, "ls:\n  List directory"},
			   {"cat", run_cat, "cat <filename>:\n  Type file contents"},
			   //    {"simple", simple, "simple:\n  Run simple FS tests"},
			   {"big_file_test", run_big_file_test,
			    "big_file_test <pathname> <size in bytes> <seed>:\n"
			    " Writes random data to file <pathname>.\n"
			    " <size in bytes> must be multiple of 512.\n"
			    "\te.g.: big_file_test bf 1048576 1\n"
			    "\tor: big_file_test big3G-3 0xC0000000 3"},
			   {"cdef", run_cdef,
			    "cdef:\n  Create Disk and Example Files\n"
			    "  Expects card to be already formatted and mounted"},
			   {"swcwdt", run_swcwdt,
			    "\nswcwdt:\n Stdio With CWD Test\n"
			    "Expects card to be already formatted and mounted.\n"
			    "Note: run cdef first!"},
			   {"loop_swcwdt", run_loop_swcwdt,
			    "\nloop_swcwdt:\n Run Create Disk and Example Files and Stdio With CWD "
			    "Test in a loop.\n"
			    "Expects card to be already formatted and mounted.\n"
			    "Note: Type any key to quit."},
			   {"start_logger", run_start_logger,
			    "start_logger:\n"
			    "  Start Data Log Demo"},
			   {"stop_logger", run_stop_logger,
			    "stop_logger:\n"
			    "  Stop Data Log Demo"},
			   {"help", run_help,
			    "help:\n"
			    "  Shows this command help."}};
static void run_help() {
  for (size_t i = 0; i < count_of(cmds); ++i) {
    printf("%s\n\n", cmds[i].help);
  }
}

static void process_stdio(int cRxedChar) {
  static char cmd[256];
  static size_t ix;

  if (!isprint(cRxedChar) && !isspace(cRxedChar) && '\r' != cRxedChar &&
      '\b' != cRxedChar && cRxedChar != (char)127)
    return;
  printf("%c", cRxedChar);  // echo
  stdio_flush();
  if (cRxedChar == '\r') {
    /* Just to space the output from the input. */
    printf("%c", '\n');
    stdio_flush();

    if (!strnlen(cmd, sizeof cmd)) {  // Empty input
      printf("> ");
      stdio_flush();
      return;
    }
    /* Process the input string received prior to the newline. */
    char *cmdn = strtok(cmd, " ");
    if (cmdn) {
      size_t i;
      for (i = 0; i < count_of(cmds); ++i) {
	if (0 == strcmp(cmds[i].command, cmdn)) {
	  (*cmds[i].function)();
	  break;
	}
      }
      if (count_of(cmds) == i) printf("Command \"%s\" not found\n", cmdn);
    }
    ix = 0;
    memset(cmd, 0, sizeof cmd);
    printf("\n> ");
    stdio_flush();
  } else {  // Not newline
    if (cRxedChar == '\b' || cRxedChar == (char)127) {
      /* Backspace was pressed.  Erase the last character
	 in the string - if any. */
      if (ix > 0) {
	ix--;
	cmd[ix] = '\0';
      }
    } else {
      /* A character was entered.  Add it to the string
	 entered so far.  When a \n is entered the complete
	 string will be passed to the command interpreter. */
      if (ix < sizeof cmd - 1) {
	cmd[ix] = cRxedChar;
	ix++;
      }
    }
  }
}


// read the value on the data bus

int data_gpio[8] =
  {
   SLOT_SD0_PIN,
   SLOT_SD1_PIN,
   SLOT_SD2_PIN,
   SLOT_SD3_PIN,
   SLOT_SD4_PIN,
   SLOT_SD5_PIN,
   SLOT_SD6_PIN,
   SLOT_SD7_PIN,
  };

inline BYTE get_data_bus(void)
{
  int data = 0;

  // As we are reading the bus, the direction line should be high
  gpio_put(LS_DIR_PIN, 1);
  
#if DIRECT_GPIO
  // Direct register access, as it's faster
  data = sio_hw->gpio_in;
  data >>= 8;
  data &= 0xff;
  
#else
  int i;
  
  for(i=0; i<8; i++)
    {
      if( gpio_get(data_gpio[i]) )
	{
	  data |= (1<<i);
	}
    }
#endif
  return((BYTE)data);
  
}

// Set the data bus to point to the Psion, i.e. outputs from us
inline void set_bus_outputs(void)
{
  // Drive level shifters to be driving Psion

  gpio_put(LS_DIR_PIN, 0);

#if DIRECT_GPIO
  sio_hw->gpio_oe |= 0x0000FF00;
#else
  int i;
  
  
  for(i=0; i<8; i++)
    {
      gpio_set_dir(data_gpio[i], GPIO_OUT);
    }
#endif
}

// Set data bus to drive us
inline void set_bus_inputs(void)
{

#if DIRECT_GPIO
  
  // Direct register access to make things faster

  // Get current output states
  sio_hw->gpio_oe &= 0xffff00ff;

#else
  int i;
  
  for(i=0; i<8; i++)
    {
      gpio_set_dir(data_gpio[i], GPIO_IN);
    }
#endif
  // Drive level shifters to be driving Pico
  
  gpio_put(LS_DIR_PIN, 1);

}

// Set up the data bus GPIO lines

inline void set_data_bus(BYTE data)
{
#if DIRECT_GPIO
  int states;
  int dat = data;
  //dat = ss_address;
  
  // Direct register access to make things faster

  // Get current output states
  states = sio_hw->gpio_out;

  // Our data has its LSB at GPIO8
  states &= 0xFFFF00FF;
  sio_hw->gpio_out = states | (dat <<8);
#else
  int i;

  // Ensure the level shifters are towards the Psion, and we are set as ouputs
  for(i=0; i<8; i++)
    {
      if( data & (1 << i) )
	{
	  gpio_put(data_gpio[i], 1);
	}
      else
	{
	  gpio_put(data_gpio[i], 0);
	}
    }
#endif
}

#if 0
void xgpio_callback(uint gpio, uint32_t events)
{
  gpio_put(22,1);
  switch(gpio)
    {
    case SLOT_SS_PIN:
      
      // SS low, so we are selected
      if( events & 5 )
	{
	  // We are selected, look at SOE to see if we should drive the data bus or not
	  if ( gpio_get(SLOT_SOE_PIN) )
	    {
	      int data;
	      
	      // High so don't drive the data bus, this is a write
	      // Capture data on bus
	      set_bus_inputs();
	      data = get_data_bus();

	      // write to ram
#if !READ_ONLY
	      WRITE_TRAP;
	      pak_memory[PAK_ADDRESS] = data;
#endif
	    }
	  else
	    {
	      // Low, so this is a read
	      // Is it a read of the pak ID?
	      if( gpio_get(SLOT_SMR_PIN) && gpio_get(SLOT_SPGM_PIN) )
		{
		  // ID byte
		  set_bus_outputs();
#if SUPPORT_ID_BYTE		  
		  set_data_bus(PAK_ID_BYTE);
#else
		  set_data_bus(pak_memory[PAK_ADDRESS]);
#endif
		}
	      else
		{
		  // Read of pak memory
		  set_bus_outputs();
		  set_data_bus(pak_memory[PAK_ADDRESS]);
		}
	    }
	}
      
      if( events & 10 )
	{
	  // SS high, so we are de-selected
	  set_bus_inputs();

	  if ( gpio_get(SLOT_SOE_PIN) )
	    {
	      int data;
	      
	      // High so don't drive the data bus, this is a write
	      // Capture data on bus
	      set_bus_inputs();
	      data = get_data_bus();

#if !READ_ONLY	      
	      // write to ram
	      WRITE_TRAP;
	      pak_memory[PAK_ADDRESS] = data;
#endif
	    }
	}
      break;
      
    case SLOT_SCLK_PIN:
      // The lower address bit is the CLK line
      if( events & 5)
	{
	  ss_address+=2;
	  ss_address &= (~1);

	  // Wrap address (linear part)
	  ss_address &= 0xff;
	}
      
      if( events & 10)
	{
	  ss_address |= 1;
	}

      // We now have to present data if we are selected
      if( gpio_get(SLOT_SS_PIN) == 0 )
	{
	  // We are selected, look at SOE to see if we should drive the data bus or not
	  if ( gpio_get(SLOT_SOE_PIN) )
	    {
	      int data;
	      
	      // High so don't drive the data bus, this is a write
	      // Capture data on bus
	      set_bus_inputs();
	      data = get_data_bus();

	      // write to ram
	      //pak_memory[PAK_ADDRESS] = data;
	    }
	  else
	    {
	      // Low, so this is a read
	      // Is it a read of the pak ID?
	      if( gpio_get(SLOT_SMR_PIN) && gpio_get(SLOT_SPGM_PIN) )
		{
		  // ID byte
		  set_bus_outputs();
		  set_data_bus(1);
		}
	      else
		{
		  // Read of pak memory
		  set_bus_outputs();
		  set_data_bus(pak_memory[PAK_ADDRESS]);
		}
	    }
	  
	}
      
      break;

    case SLOT_SMR_PIN:
      if( events & 10 )
	{
	  ss_address=0;
	}
      break;
#if 0
    case SLOT_SOE_PIN:
      if( events & 10 )
	{
	  set_bus_inputs();
	  soe_state = 1;
	}
      if( events & 5 )
	{
	  soe_state = 0;
	}
      break;
#endif
    case SLOT_SPGM_PIN:
      break;
      
    default:
      // Don't care what this is
      break;
    }
  //  gpio_put(22,0);
}
#endif

////////////////////////////////////////////////////////////////////////////////
//
// Poll and handle the address counter on the second core
//

void handle_address(void)
{
  int last_ss;
  int last_sclk;
  int last_soe;
  int last_smr;
  int last_spgm;
  
  last_ss     = gpio_get(SLOT_SS_PIN);
  last_sclk   = gpio_get(SLOT_SCLK_PIN);
  last_soe    = gpio_get(SLOT_SOE_PIN);
  last_smr    = gpio_get(SLOT_SMR_PIN);
  last_spgm   = gpio_get(SLOT_SPGM_PIN);

  int ss;
  int sclk;
  int soe;
  int smr;
  int spgm;

  TRACE('I');
  TRACE('N');
  TRACE('I');
  TRACE('T');
    
  while(1)
    {
      // Read GPIO states
      ss     = gpio_get(SLOT_SS_PIN);
      sclk   = gpio_get(SLOT_SCLK_PIN);
      soe    = gpio_get(SLOT_SOE_PIN);
      smr    = gpio_get(SLOT_SMR_PIN);
      spgm   = gpio_get(SLOT_SPGM_PIN);
      
      //----------------------------------------------------------------------
      // SCLK handling
      // The lower address bit is the CLK line
      // Falling edge
      if( (last_sclk == 1) && (sclk == 0))
	{
	  // Only increment if the SMR line is low
	  if( smr == 0 )
	    {
	      TRACE('c');
	      ss_address+=2;
	      ss_address &= (~1);
	      
	      // Wrap address
	      ss_address &= PAK_MEMORY_SIZE - 1;
	      
	      TRACE(ss_address & 0xFF);
	      TRACE((ss_address >> 8) & 0xFF);
	    }
	  else
	    {
	      // Trace 'clock when SMR high', this is seen in traces
	      TRACE('z');
	    }
	}
      
      // Rising edge
      if( (last_sclk == 0) && (sclk == 1))
	{
	  if( smr == 0 )
	    {
	      ss_address |= 1;
	      TRACE('C');
	      TRACE(ss_address & 0xFF);
	      TRACE((ss_address >> 8) & 0xFF);
	    }
	  else
	    {
	      TRACE('Z');
	    }
	}

      // We now have to present data if we are selected
      if( ss == 0 )
	{
	  // We are selected, look at SOE to see if we should drive the data bus or not
	  if ( soe )
	    {
	      int data;
	      
	      // High so don't drive the data bus, this is a write
	      // Capture data on bus
	      set_bus_inputs();
	      
	      // We don't write here as SS hasn't gone high and OE hasn't gone high
	      data = get_data_bus();

#if !READ_ONLY		  
	      if( smr == 0 )
		{
		  // write to ram
		  WRITE_TRAP;
		  pak_memory[PAK_ADDRESS] = data;
		}
#endif
	    }
	  else
	    {
	      // Low, so this is a read
	      // Is it a read of the pak ID?
	      if( smr && spgm )
		{
		  TRACE('i');
		  
		  // ID byte
		  set_bus_outputs();
		  set_data_bus(1);
		}
	      else
		{
		  // Read of pak memory
		  set_bus_outputs();
		  set_data_bus(pak_memory[PAK_ADDRESS]);
		}
	    }
	  
	}

      //--------------------------------------------------------------------------------
      // Page Counter

      if( (last_spgm == 1) && (spgm == 0) )
	{
	  TRACE('P');
	  ss_page += (1 << 8);
	  ss_page &= 0x00007F00;
	}
      
      //----------------------------------------------------------------------
      // SMR handling
      
      if( (last_smr == 0) && (smr == 1) )
	{
	  TRACE('R');
	  TRACE('E');
	  TRACE('S');
	  
	  ss_address=0;
	  ss_page = 0;
	}

      last_ss     = ss;
      last_sclk   = sclk;
      last_soe    = soe;
      last_smr    = smr;
      last_spgm   = spgm;

    }
}

////////////////////////////////////////////////////////////////////////////////
//
//

int main()
{
#if FF_FIRST_BYTES
  for(int k=0; k< 100; k++)
    {
      pak_memory[k] = 0xff;
    }
#endif

  stdio_init_all();
  //time_init();
  //adc_init();

  gpio_init(22);
  
  // Select the SD card
  gpio_put(22, 0);
  gpio_set_dir(22, GPIO_OUT);
  gpio_put(22, 0);
  
  // Set up directions for the control lines
  gpio_init(SLOT_SS_PIN);
  gpio_init(SLOT_SCLK_PIN);
  gpio_init(SLOT_SMR_PIN);
  gpio_init(SLOT_SOE_PIN);
  gpio_init(SLOT_SPGM_PIN);

  for(int i=0; i<8; i++)
    {
      gpio_init(data_gpio[i]);
    }
  
  gpio_set_dir(SLOT_SS_PIN, GPIO_IN);
  gpio_set_dir(SLOT_SCLK_PIN, GPIO_IN);
  gpio_set_dir(SLOT_SMR_PIN, GPIO_IN);
  gpio_set_dir(SLOT_SOE_PIN, GPIO_IN);
  gpio_set_dir(SLOT_SPGM_PIN, GPIO_IN);

  // Drive data bus towards us
  gpio_init(LS_DIR_PIN);
  gpio_put(LS_DIR_PIN, 1);

  // LS_DIR is an output
  gpio_set_dir(LS_DIR_PIN, GPIO_OUT);
  set_bus_inputs();

#if USE_INTERRUPTS
  gpio_set_irq_enabled_with_callback(SLOT_SS_PIN,   GPIO_IRQ_EDGE_RISE | GPIO_IRQ_EDGE_FALL, true, &gpio_callback);
  gpio_set_irq_enabled_with_callback(SLOT_SCLK_PIN, GPIO_IRQ_EDGE_RISE | GPIO_IRQ_EDGE_FALL, true, &gpio_callback);
  gpio_set_irq_enabled_with_callback(SLOT_SMR_PIN,  GPIO_IRQ_EDGE_RISE | GPIO_IRQ_EDGE_FALL, true, &gpio_callback);
  gpio_set_irq_enabled_with_callback(SLOT_SOE_PIN,  GPIO_IRQ_EDGE_RISE | GPIO_IRQ_EDGE_FALL, true, &gpio_callback);
  gpio_set_irq_enabled_with_callback(SLOT_SPGM_PIN, GPIO_IRQ_EDGE_RISE | GPIO_IRQ_EDGE_FALL, true, &gpio_callback);
#endif
  
  sd_init_driver();
    
  printf("\033[2J\033[H");  // Clear Screen
  printf("\n> ");
  stdio_flush();

  // Set up OLED display
  i2c_init(&i2c_bus_0);
    
  oled_setup(&oled0);
    
  oled_set_xy(&oled0, 0,0);
  oled_display_string(&oled0, "Datapak Gadget");

#if USE_INTERRUPTS
  oled_set_xy(&oled0, 0,14);
  oled_display_string(&oled0, "Interrupts");
#endif

#if USE_POLLING
  oled_set_xy(&oled0, 0,14);
  oled_display_string(&oled0, "Polling");
#endif
  
  int count = 0;

#if MULTICORE_POLL
  // Start the address handling on the other core
  multicore_launch_core1(handle_address);
#endif
  
  // Main loop that updates OLED display if using interrupts
#if USE_INTERRUPTS
  for (;;)
    {
#if 1
      // Monitor the SS line and count how many falling edges there are
      
      char line[80];
      sprintf(line, "%d %d %d %d        ", count, ss_count, ss_address, soe_state);
      oled_set_xy(&oled0, 0, 21);
      oled_display_string(&oled0, line);
      
      count++;
#endif

    }
#endif  

#if USE_POLLING
  // Use a polling loop for minimum latency
  
  int last_ss;
  int last_sclk;
  int last_soe;
  int last_smr;
  int last_spgm;
  
  last_ss     = gpio_get(SLOT_SS_PIN);
  last_sclk   = gpio_get(SLOT_SCLK_PIN);
  last_soe    = gpio_get(SLOT_SOE_PIN);
  last_smr    = gpio_get(SLOT_SMR_PIN);
  last_spgm   = gpio_get(SLOT_SPGM_PIN);

  int ss;
  int sclk;
  int soe;
  int smr;
  int spgm;


  // Turn off timer interrupts
  irq_set_mask_enabled(0xf, false);

  gpio_put(22,1);
  gpio_put(22,0);
  gpio_put(22,1);
  gpio_put(22,0);

  while(1)
    {
      gpio_put(22,1);
      gpio_put(22,0);
      
      if( pak_memory[0] == 0 )
	{
	  gpio_put(22,1);
	}
      
      // Read GPIO states
      ss     = gpio_get(SLOT_SS_PIN);
      sclk   = gpio_get(SLOT_SCLK_PIN);
      soe    = gpio_get(SLOT_SOE_PIN);
      smr    = gpio_get(SLOT_SMR_PIN);
      spgm   = gpio_get(SLOT_SPGM_PIN);
      
      // Waste some time signalling start of loop
      //gpio_put(22,1);

      
      if( (last_ss == 1) && (ss == 0) )
	{
	  // We are selected, look at SOE to see if we should drive the data bus or not
	  if ( soe )
	    {
	      int data;
	      
	      // High so don't drive the data bus, this is either a write or
	      // it is a write of the 128K EPROM segment register
	      
	      // Capture data on bus
	      set_bus_inputs();
	      data = get_data_bus();

	      if( smr == 1 )
		{
		  // Segment register write
		  TRACE('s');
		  TRACE(data);
		}
	      else
		{
		  TRACE('W');
		  TRACE(data);
		  TRACE(ss_address & 0xff);
		  TRACE(ss_address >> 8);
		  
#if !READ_ONLY	      
		  // write to ram
		  WRITE_TRAP;
		  pak_memory[PAK_ADDRESS] = data;
#endif
		}
	    }
	  else
	    {
	      // Low, so this is a read
	      // Is it a read of the pak ID?
	      //	      if( gpio_get(SLOT_SMR_PIN) && gpio_get(SLOT_SPGM_PIN) )
	      if( smr && spgm )
		{
		  // ID byte
		  set_bus_outputs();
#if SUPPORT_ID_BYTE
		  TRACE('I');
		  TRACE(PAK_ID_BYTE);
		  set_data_bus(PAK_ID_BYTE);
#else
		  TRACE('W');
		  TRACE(pak_memory[PAK_ADDRESS]);
		  TRACE(ss_address & 0xff);
		  TRACE(ss_address >> 8);

		  set_data_bus(pak_memory[PAK_ADDRESS]);
#endif
		}
	      else
		{
		  // Read of pak memory
		  set_bus_outputs();
		  TRACE('r');
		  TRACE(pak_memory[ss_address]);
		  set_data_bus(pak_memory[PAK_ADDRESS]);
		}
	    }
	}
      
      if( (last_ss == 0 ) && (ss == 1) )
	{
	  // SS high, so we are de-selected
	  //gpio_put(22,1);
	  //gpio_put(22,0);

	  set_bus_inputs();
	  
	  if ( soe )
	    {
	      int data;
	      
	      // High so don't drive the data bus, this is either a write of the
	      // 128K EPROM segment register or a write
	      
	      // Capture data on bus
	      //	      set_bus_inputs();
	      data = get_data_bus();

	      if( smr == 1 )
		{
		  // 128K segment write
		  TRACE('s');
		  TRACE(data);
		}
	      else
		{
		  TRACE('w');
		  TRACE(data);
		  TRACE(ss_address & 0xff);
		  TRACE(ss_address >> 8);


#if !READ_ONLY	      
		  // write to ram
		  WRITE_TRAP;
		  pak_memory[PAK_ADDRESS] = data;
#endif
		}
	    }
	}

#if !MULTICORE_POLLING      
      //----------------------------------------------------------------------
      // SCLK handling
      // The lower address bit is the CLK line
      // Falling edge
      if( (last_sclk == 1) && (sclk == 0))
	{
#if 0	  
	  ss_address+=2;
	  ss_address &= (~1);
	  
	  // Wrap address
	  ss_address &= PAK_MEMORY_SIZE - 1;
#endif
	}

      
      // Rising edge
      if( (last_sclk == 0) && (sclk == 1))
	{
	  //	  ss_address |= 1;
	  
	  // We now have to present data if we are selected
	  if( ss == 0 )
	    {
	      // We are selected, look at SOE to see if we should drive the data bus or not
	      if ( soe )
		{
		  int data;
		  
		  // High so don't drive the data bus, this is a write
		  // Capture data on bus
		  set_bus_inputs();

		  // We don't write here as SS hasn't gone high and OE hasn't gone high
		  //data = get_data_bus();

#if !READ_ONLY		  
		  // write to ram
		  //pak_memory[PAK_ADDRESS] = data;
#endif
		}
	      else
		{
		  // Low, so this is a read
		  // Is it a read of the pak ID?
		  if( smr && spgm )
		    {
		      TRACE('I');
		      TRACE('D');
		      // ID byte
		      set_bus_outputs();
		      set_data_bus(PAK_ID_BYTE);
		    }
		  else
		    {
		      // Read of pak memory
		      TRACE('R');
		      TRACE('D');
		      TRACE(pak_memory[PAK_ADDRESS]);
		      TRACE(PAK_ADDRESS & 0xff);
		      TRACE(PAK_ADDRESS >> 8);

		      set_bus_outputs();
		      set_data_bus(pak_memory[PAK_ADDRESS]);
		    }
		}
	      
	    }
	}

      //----------------------------------------------------------------------


      //----------------------------------------------------------------------
      // SMR handling
      
      if( (last_smr == 0) && (smr == 1) )
	{
	  ss_address = 0;
	}

#endif
      // If soe goes high then we have to make bus inputs
      // If ss is low as well then it's a write
      if( (last_soe == 0) && (soe == 1) )
	{
	  int data;
	  
	  // High so don't drive the data bus, this is a write
	  // Capture data on bus
	  set_bus_inputs();

	  // If ss is low, then this is a write as OE is attached to WR on RAMPAKs
	  // CE is gated with SMR so that can stop the write
	  if( (ss == 0) && (spgm == 0) )
	    {
	      data = get_data_bus();

	      if( smr == 1 )
		{
		}
	      else
		{
#if !READ_ONLY	      
		  // write to ram
		  //pak_memory[PAK_ADDRESS] = data;
#endif
		}
	    }
	}

      // catch-all, force inputs
      if( soe )
	{
	  set_bus_inputs();
	}
      
      last_ss     = ss;
      last_sclk   = sclk;
      last_soe    = soe;
      last_smr    = smr;
      last_spgm   = spgm;
      
    }

#endif
}



